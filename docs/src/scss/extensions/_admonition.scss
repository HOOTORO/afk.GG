@import "../palette/dracula";

:root {
  --md-admonition-icon--sh-luv: url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-heart-fill" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/></svg>');
  --md-shadow-z7: 0 0.2rem 0.6rem hsla(0, 6%, 27%, 0.293),
    0 0 0 0.1rem #47474716;
}

$new-admonitions: (
  settings config: $drac-pink $clr-purple-a700 "@mdi/svg/svg/cog.svg",
  new: $drac-yellow $clr-yellow-a700 "@mdi/svg/svg/alert-decagram.svg"
) !default;

$old-admonitions: (
  note: $drac-dark-yellow,
  abstract: $drac-cyan,
  info: $drac-light-blue,
  tip: $drac-teal,
  success: $drac-green,
  question: $drac-light-green,
  warning: $drac-orange,
  failure: $drac-dark-red,
  danger: $drac-red,
  bug: $drac-dark-pink,
  example: $drac-purple,
  quote: $drac-grey,
) !default;

/* Style new admonitions with dark or light colors */
:root > * {
  --md-admonition-bg-color: transparent;

  &[data-md-color-scheme="dracula"] {
    --md-admonition-icon-color: $drac-dark-yellow;
  }

  @each $names, $prop in $new-admonitions {
    $tint: nth($prop, 1);
    $tint2: nth($prop, 2);
    $name: nth($names, 1);

    --md-admonition-icon--#{$name}: svg-load("#{nth($prop, 3)}");
    --md-admonition-bg-color--#{$name}: #{transparentize($tint2, 0.9)};
    --md-admonition-icon-color--#{$name}: #{$tint2};

    &[data-md-color-scheme="dracula"] {
      --md-admonition-bg-color--#{$name}: var(
        --md-default-bg-color--ultra-dark
      );
      --md-admonition-icon-color--#{$name}: #{$tint};
    }
  }

  @each $names, $tint in $old-admonitions {
    $name: nth($names, 1);
    --md-admonition-bg-color--#{$name}: var(--md-default-bg-color--ultra-dark);
    --md-admonition-icon-color--#{$name}: #{$tint};
  }
}

/* Dark mode changes */
[data-md-color-scheme="dracula"] .md-typeset .admonition {
  border-color: var(--md-admonition-icon-color--note);
  > .admonition-title {
    background-color: var(--md-admonition-bg-color--note);
    &::before {
      background-color: var(--md-admonition-icon-color--note);
    }
    &::after {
      color: var(--md-admonition-icon-color--note);
    }
  }

  box-shadow: var(--md-shadow-z7);
}

/* Style existing admonitions with dark mode colors */
[data-md-color-scheme="dracula"] {
  @each $names, $prop in $old-admonitions {
    $name: nth($names, 1);

    // Define base class
    .md-typeset .admonition.#{$name} {
      border-color: var(--md-admonition-icon-color--#{$name});

      // Define base class
      > .admonition-title {
        background-color: var(--md-admonition-bg-color--#{$name});
        border-color: var(--md-admonition-icon-color--#{$name});

        // Icon
        &::before {
          background-color: var(--md-admonition-icon-color--#{$name});
        }
        &::after {
          color: var(--md-admonition-icon-color--#{$name});
        }
      }
    }

    // Define synonyms for base class
    @if length($names) > 1 {
      @for $n from 2 through length($names) {
        .#{nth($names, $n)} {
          @extend .#{$name};
        }
      }
    }
  }
}

@each $names, $prop in $new-admonitions {
  $name: nth($names, 1);

  // Define base class
  .md-typeset .admonition.#{$name} {
    border-color: var(--md-admonition-icon-color--#{$name});

    > .admonition-title {
      background-color: var(--md-admonition-bg-color--#{$name});
      border-color: var(--md-admonition-icon-color--#{$name});

      // Icon
      &::before {
        width: px2rem(20px);
        height: px2rem(20px);
        background-color: var(--md-admonition-icon-color--#{$name});
        background-size: px2rem(20px);
        mask-image: var(--md-admonition-icon--#{$name});
        content: "\a0";
      }
      &::after {
        color: var(--md-admonition-icon-color--#{$name});
      }
    }
  }

  // Define synonyms for base class
  @if length($names) > 1 {
    @for $n from 2 through length($names) {
      .#{nth($names, $n)} {
        @extend .#{$name};
      }
    }
  }
}

@media screen and (min-width: 45em) {
  .md-typeset .inline {
    width: fit-content;
    max-width: 20.7rem;
    margin-top: 0;
    margin-bottom: 0.8rem;
  }
}

.quote > p.admonition-title {
  align-items: center;
  padding: 10px;
}

.quote > p.admonition-title > a {
  margin-right: 15px;
}

li > a > img {
  border-radius: 0;
}

.md-typeset .admonition-title {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.md-typeset .admonition {
  border-width: 0;
  border-left-width: 4px;
}

.md-typeset .admonition,
.md-typeset details {
  box-shadow: var(--md-shadow-z7);
}

.md-typeset .admonition.sh-luv,
.md-typeset details.sh-luv {
  border-color: rgb(235, 5, 5);
}

.md-typeset .sh-luv > .admonition-title,
.md-typeset .sh-luv > summary {
  background-color: rgba(235, 5, 5, 0.2);
}

.md-typeset .sh-luv > .admonition-title::before,
.md-typeset .sh-luv > summary::before {
  background-color: rgba(235, 5, 5);
  -webkit-mask-image: var(--md-admonition-icon--sh-luv);
  animation: heart 1000ms infinite;
}
