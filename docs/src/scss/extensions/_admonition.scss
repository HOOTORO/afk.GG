@use "sass:color";
@use "sass:map";

$admonitions: (
  new: "yellow" var(--md-admonition-icon--new),
  sh-luv: "dark-red" var(--md-admonition-icon--sh-luv),
  settings: "pink" var(--md-admonition-icon--settings),
  note: "yellow" &,
  abstract: "cyan" &,
  info: "blue" &,
  tip: "teal" &,
  success: "green" &,
  question: "green" &,
  warning: "orange" &,
  failure: "red" &,
  danger: "red" &,
  bug: "pink" &,
  example: "purple" &,
  quote: "grey" &,
  config: "dark-pink" var(--md-admonition-icon--settings)
);

$aniadmo: (
  new: pushup 1000ms infinite,
  sh-luv: heart 1000ms infinite,
  settings: spin 4s linear infinite
);
/* Style new admonitions with dark or light colors */
:root > * {
  // --md-admonition-bg-color: transparent;
  @each $theme in $themes {
    &[data-md-color-scheme="#{$theme}"] {
      @each $name, $prop in $admonitions {
        $tint: map.get($colormap, $theme, nth($prop, 1));
        $alohaTint: color.adjust($tint, $alpha: -0.9);

        --md-admonition-icon-color--#{$name}: #{$tint};
        --md-admonition-shadow-color--#{$name}: #{$alohaTint};
        --md-admonition-bg-color--#{$name}: #{color.adjust(
            map.get($colormap, $theme, "def-bg"),
            $hue: 420deg,
            $lightness: -20%
          )};
      }
    }
  }
}

@each $theme in $themes {
  [data-md-color-scheme="#{$theme}"] {
    @each $name, $prop in $admonitions {
      // Define base class
      .md-typeset .admonition.#{$name} {
        border-color: var(--md-admonition-icon-color--#{$name});

        // Define base class
        > .admonition-title {
          display: flex;
          justify-content: space-between;
          background-color: var(--md-admonition-bg-color--#{$name});
          border-color: var(--md-admonition-icon-color--#{$name});

          &::before {
            width: px2rem(20px);
            height: px2rem(20px);
            background-color: var(--md-admonition-icon-color--#{$name});
            background-size: px2rem(20px);
            mask-image: var(--md-admonition-icon--#{$name});
            -webkit-mask-image: var(--md-admonition-icon--#{$name});
            content: "\a0";
          }
          &::after {
            color: var(--md-admonition-icon-color--#{$name});
          }
        }
      }
    }
  }
}

@each $name, $props in $aniadmo {
  .md-typeset .#{$name} > .admonition-title::before,
  .md-typeset .#{$name} > summary::before {
    animation: $props;
  }
}

@media screen and (min-width: 45em) {
  .md-typeset .inline {
    width: fit-content;
    max-width: 20.7rem;
    margin-top: 0;
    margin-bottom: 0.8rem;
  }
}

@keyframes heart {
  0%,
  40%,
  80%,
  100% {
    transform: scale(1);
  }
  20%,
  60% {
    transform: scale(1.15);
  }
}

@keyframes spin {
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@keyframes pushup {
  40% {
    transform: translateX(20);
  }
  80% {
    transform: translateX(40);
  }
  100% {
    transform: scale(1);
  }
  20%,
  60% {
    transform: scale(1.15);
  }
}
