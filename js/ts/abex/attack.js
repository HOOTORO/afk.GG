import { expeditor, team } from "../abex.js";
import { elBuilder } from "../components/builder.js";
import { exportToCsv } from "../components/csvexport.js";
import { newBtn, newEl, newIn } from "../components/helper.js";
import { elTag, Input } from "../model/constants.js";
import { Virtues } from "../types/virtue.js";
const outputTableId = "dps-table";
export function AttackForm() {
    const c = "attack-inputs", dataColumns = [
        "Team",
        "Pet",
        ...expeditor.DuraTree.map((x) => x.img().outerHTML),
        "Damage",
        "Comment",
    ];
    const addAttack = newBtn("Add Dmg", "add-attack md-button"), csvExport = newBtn("Export", "export-csv md-button"), retryBtn = newBtn("Retry", "retry-attack md-button"), treeDiv = newEl("div", { class: `team-set-inputs` });
    treeDiv.appendChild(team.food.html());
    expeditor.DuraTree.forEach((x) => {
        treeDiv.appendChild(x.html());
    });
    const btnContainer = new elBuilder(elTag.Label)
        .add(addAttack)
        .add(csvExport)
        .html(), dpsLabel = new elBuilder(elTag.Label, { for: "dps" }, "Damage, B.")
        .add(newIn(Input.Number, { class: `${c}__input`, id: "dps", step: "1000" }))
        .add(newEl(elTag.Span, { id: "allowed-retry", class: "calculated" }))
        .html(), comLabel = new elBuilder(elTag.Label, { for: "comm" }, "Comment")
        .add(newIn(Input.Text, { class: `${c}__input`, id: "comm" }))
        .add(newEl(elTag.Span, { id: "avg-dps", class: "calculated" }))
        .html(), retryLabel = new elBuilder(elTag.Label, { for: "dis-flag" }, "Discarded?")
        .add(newIn(Input.CheckBox, { class: `${c}__input`, id: "dis-flag" }))
        .html();
    const atkF = new elBuilder(elTag.Form, {
        class: "team-set-inputs",
        id: "team-attacks-form",
    })
        .add(dpsLabel)
        .add(comLabel)
        .add(retryLabel)
        .add(btnContainer)
        .html();
    const atkC = new elBuilder(elTag.Div, { class: c })
        .add(newEl("h2", {}, "Set Food & Dura Tree"))
        .add(treeDiv)
        .add(atkF)
        .html();
    document.getElementById("attack-app").appendChild(atkC);
    team.mount("team-set");
    const header = document
        .getElementById("attack-app")
        .appendChild(newEl(elTag.Table, {
        id: outputTableId,
        class: "dps",
        style: "width:100%",
    }))
        .appendChild(newEl(elTag.Thead))
        .appendChild(newEl(elTag.tr));
    const body = document
        .getElementById("dps-table")
        .appendChild(newEl(elTag.Tbody));
    dataColumns.forEach((x) => header.appendChild(newEl(elTag.th, {}, x)));
    const dpsField = document.getElementById("dps");
    const commentField = document.getElementById("comm");
    const discarded = document.getElementById("dis-flag");
    csvExport.addEventListener("click", (e) => {
        const o = team.damage.map((x) => [
            team.roster.map((y) => y.name).join("|"),
            team.beast.name,
            ...expeditor.DuraTree.map((v) => `${v.value}`),
            x[0].toString(),
            x[1].toString(),
        ]);
        exportToCsv("data.csv", o, dataColumns);
    });
    addAttack.addEventListener("click", (e) => {
        const tree = newEl(elTag.Div);
        expeditor.DuraTree.forEach((x) => {
            tree.appendChild(x.img());
            tree.innerHTML += `:${x.value}`;
        });
        team.appendResultRow(body, dpsField.valueAsNumber, expeditor.DuraTree[Virtues.MIGHT].value, expeditor.DuraTree[Virtues.FORTITUDE].value, expeditor.DuraTree[Virtues.CELERITY].value, expeditor.DuraTree[Virtues.SORCERY].value, expeditor.DuraTree[Virtues.SUSTENANCE].value, commentField.value, discarded.checked);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FiZXgvYXR0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFN0MsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDO0FBRWxDLE1BQU0sVUFBVSxVQUFVO0lBQ3hCLE1BQU0sQ0FBQyxHQUFHLGVBQWUsRUFDdkIsV0FBVyxHQUFHO1FBQ1osTUFBTTtRQUNOLEtBQUs7UUFDTCxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDO1FBQ25ELFFBQVE7UUFDUixTQUFTO0tBQ1YsQ0FBQztJQUVKLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsRUFDekQsU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsc0JBQXNCLENBQUMsRUFDcEQsUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsd0JBQXdCLENBQUMsRUFDcEQsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBRXZELE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sWUFBWSxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDNUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztTQUVaLEdBQUcsQ0FBQyxTQUFTLENBQUM7U0FDZCxJQUFJLEVBQUUsRUFDVCxRQUFRLEdBQUcsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUM7U0FDaEUsR0FBRyxDQUNGLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FDdkU7U0FDQSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1NBQ3BFLElBQUksRUFBRSxFQUNULFFBQVEsR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLFNBQVMsQ0FBQztTQUM5RCxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM1RCxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUs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RUFDNUMsWUFBWSxDQUFDLEtBQUssRUFDbEIsU0FBUyxDQUFDLE9BQU8sQ0FDbEIsQ0FBQztJQWFKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVkaXRvciwgdGVhbSB9IGZyb20gXCIuLi9hYmV4LmpzXCI7XG5pbXBvcnQgeyBlbEJ1aWxkZXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9idWlsZGVyLmpzXCI7XG5pbXBvcnQgeyBleHBvcnRUb0NzdiB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NzdmV4cG9ydC5qc1wiO1xuaW1wb3J0IHsgbmV3QnRuLCBuZXdFbCwgbmV3SW4gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9oZWxwZXIuanNcIjtcbmltcG9ydCB7IGVsVGFnLCBJbnB1dCB9IGZyb20gXCIuLi9tb2RlbC9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IFZpcnR1ZXMgfSBmcm9tIFwiLi4vdHlwZXMvdmlydHVlLmpzXCI7XG5cbmNvbnN0IG91dHB1dFRhYmxlSWQgPSBcImRwcy10YWJsZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQXR0YWNrRm9ybSgpIHtcbiAgY29uc3QgYyA9IFwiYXR0YWNrLWlucHV0c1wiLFxuICAgIGRhdGFDb2x1bW5zID0gW1xuICAgICAgXCJUZWFtXCIsXG4gICAgICBcIlBldFwiLFxuICAgICAgLi4uZXhwZWRpdG9yLkR1cmFUcmVlLm1hcCgoeCkgPT4geC5pbWcoKS5vdXRlckhUTUwpLFxuICAgICAgXCJEYW1hZ2VcIixcbiAgICAgIFwiQ29tbWVudFwiLFxuICAgIF07XG5cbiAgY29uc3QgYWRkQXR0YWNrID0gbmV3QnRuKFwiQWRkIERtZ1wiLCBcImFkZC1hdHRhY2sgbWQtYnV0dG9uXCIpLFxuICAgIGNzdkV4cG9ydCA9IG5ld0J0bihcIkV4cG9ydFwiLCBcImV4cG9ydC1jc3YgbWQtYnV0dG9uXCIpLFxuICAgIHJldHJ5QnRuID0gbmV3QnRuKFwiUmV0cnlcIiwgXCJyZXRyeS1hdHRhY2sgbWQtYnV0dG9uXCIpLFxuICAgIHRyZWVEaXYgPSBuZXdFbChcImRpdlwiLCB7IGNsYXNzOiBgdGVhbS1zZXQtaW5wdXRzYCB9KTtcblxuICB0cmVlRGl2LmFwcGVuZENoaWxkKHRlYW0uZm9vZC5odG1sKCkpO1xuICBleHBlZGl0b3IuRHVyYVRyZWUuZm9yRWFjaCgoeCkgPT4ge1xuICAgIHRyZWVEaXYuYXBwZW5kQ2hpbGQoeC5odG1sKCkpO1xuICB9KTtcblxuICBjb25zdCBidG5Db250YWluZXIgPSBuZXcgZWxCdWlsZGVyKGVsVGFnLkxhYmVsKVxuICAgIC5hZGQoYWRkQXR0YWNrKVxuICAgIC8vIC5hZGQocmV0cnlCdG4pXG4gICAgICAuYWRkKGNzdkV4cG9ydClcbiAgICAgIC5odG1sKCksXG4gICAgZHBzTGFiZWwgPSBuZXcgZWxCdWlsZGVyKGVsVGFnLkxhYmVsLCB7IGZvcjogXCJkcHNcIiB9LCBcIkRhbWFnZSwgQi5cIilcbiAgICAgIC5hZGQoXG4gICAgICAgIG5ld0luKElucHV0Lk51bWJlciwgeyBjbGFzczogYCR7Y31fX2lucHV0YCwgaWQ6IFwiZHBzXCIsIHN0ZXA6IFwiMTAwMFwiIH0pXG4gICAgICApXG4gICAgICAuYWRkKG5ld0VsKGVsVGFnLlNwYW4sIHsgaWQ6IFwiYWxsb3dlZC1yZXRyeVwiLCBjbGFzczogXCJjYWxjdWxhdGVkXCIgfSkpXG4gICAgICAuaHRtbCgpLFxuICAgIGNvbUxhYmVsID0gbmV3IGVsQnVpbGRlcihlbFRhZy5MYWJlbCwgeyBmb3I6IFwiY29tbVwiIH0sIFwiQ29tbWVudFwiKVxuICAgICAgLmFkZChuZXdJbihJbnB1dC5UZXh0LCB7IGNsYXNzOiBgJHtjfV9faW5wdXRgLCBpZDogXCJjb21tXCIgfSkpXG4gICAgICAuYWRkKG5ld0VsKGVsVGFnLlNwYW4sIHsgaWQ6IFwiYXZnLWRwc1wiLCBjbGFzczogXCJjYWxjdWxhdGVkXCIgfSkpXG4gICAgICAuaHRtbCgpLFxuICAgIHJldHJ5TGFiZWwgPSBuZXcgZWxCdWlsZGVyKGVsVGFnLkxhYmVsLCB7IGZvcjogXCJkaXMtZmxhZ1wiIH0sIFwiRGlzY2FyZGVkP1wiKVxuICAgICAgLmFkZChuZXdJbihJbnB1dC5DaGVja0JveCwgeyBjbGFzczogYCR7Y31fX2lucHV0YCwgaWQ6IFwiZGlzLWZsYWdcIiB9KSlcbiAgICAgIC5odG1sKCk7XG5cbiAgY29uc3QgYXRrRiA9IG5ldyBlbEJ1aWxkZXIoZWxUYWcuRm9ybSwge1xuICAgIGNsYXNzOiBcInRlYW0tc2V0LWlucHV0c1wiLFxuICAgIGlkOiBcInRlYW0tYXR0YWNrcy1mb3JtXCIsXG4gIH0pXG4gICAgLmFkZChkcHNMYWJlbClcbiAgICAuYWRkKGNvbUxhYmVsKVxuICAgIC5hZGQocmV0cnlMYWJlbClcbiAgICAuYWRkKGJ0bkNvbnRhaW5lcilcbiAgICAuaHRtbCgpO1xuXG4gIGNvbnN0IGF0a0MgPSBuZXcgZWxCdWlsZGVyKGVsVGFnLkRpdiwgeyBjbGFzczogYyB9KVxuICAgIC5hZGQobmV3RWwoXCJoMlwiLCB7fSwgXCJTZXQgRm9vZCAmIER1cmEgVHJlZVwiKSlcbiAgICAuYWRkKHRyZWVEaXYpXG4gICAgLmFkZChhdGtGKVxuICAgIC5odG1sKCk7XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhdHRhY2stYXBwXCIpLmFwcGVuZENoaWxkKGF0a0MpO1xuICB0ZWFtLm1vdW50KFwidGVhbS1zZXRcIik7XG5cbiAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudEJ5SWQoXCJhdHRhY2stYXBwXCIpXG4gICAgLmFwcGVuZENoaWxkKFxuICAgICAgbmV3RWwoZWxUYWcuVGFibGUsIHtcbiAgICAgICAgaWQ6IG91dHB1dFRhYmxlSWQsXG4gICAgICAgIGNsYXNzOiBcImRwc1wiLFxuICAgICAgICBzdHlsZTogXCJ3aWR0aDoxMDAlXCIsXG4gICAgICB9KVxuICAgIClcbiAgICAuYXBwZW5kQ2hpbGQobmV3RWwoZWxUYWcuVGhlYWQpKVxuICAgIC5hcHBlbmRDaGlsZChuZXdFbChlbFRhZy50cikpO1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudEJ5SWQoXCJkcHMtdGFibGVcIilcbiAgICAuYXBwZW5kQ2hpbGQobmV3RWwoZWxUYWcuVGJvZHkpKTtcbiAgZGF0YUNvbHVtbnMuZm9yRWFjaCgoeCkgPT4gaGVhZGVyLmFwcGVuZENoaWxkKG5ld0VsKGVsVGFnLnRoLCB7fSwgeCkpKTtcblxuICBjb25zdCBkcHNGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHBzXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGNvbnN0IGNvbW1lbnRGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29tbVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICBjb25zdCBkaXNjYXJkZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpcy1mbGFnXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgY3N2RXhwb3J0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGNvbnN0IG8gPSB0ZWFtLmRhbWFnZS5tYXAoKHgpID0+IFtcbiAgICAgIHRlYW0ucm9zdGVyLm1hcCgoeSkgPT4geS5uYW1lKS5qb2luKFwifFwiKSxcbiAgICAgIHRlYW0uYmVhc3QubmFtZSxcbiAgICAgIC4uLmV4cGVkaXRvci5EdXJhVHJlZS5tYXAoKHYpID0+IGAke3YudmFsdWV9YCksXG4gICAgICB4WzBdLnRvU3RyaW5nKCksXG4gICAgICB4WzFdLnRvU3RyaW5nKCksXG4gICAgXSk7XG4gICAgZXhwb3J0VG9Dc3YoXCJkYXRhLmNzdlwiLCBvLCBkYXRhQ29sdW1ucyk7XG4gIH0pO1xuXG4gIGFkZEF0dGFjay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBjb25zdCB0cmVlID0gbmV3RWwoZWxUYWcuRGl2KTtcbiAgICBleHBlZGl0b3IuRHVyYVRyZWUuZm9yRWFjaCgoeCkgPT4ge1xuICAgICAgdHJlZS5hcHBlbmRDaGlsZCh4LmltZygpKTtcbiAgICAgIHRyZWUuaW5uZXJIVE1MICs9IGA6JHt4LnZhbHVlfWA7XG4gICAgfSk7XG5cbiAgICB0ZWFtLmFwcGVuZFJlc3VsdFJvdyhcbiAgICAgIGJvZHksXG4gICAgICBkcHNGaWVsZC52YWx1ZUFzTnVtYmVyLFxuICAgICAgZXhwZWRpdG9yLkR1cmFUcmVlW1ZpcnR1ZXMuTUlHSFRdLnZhbHVlLFxuICAgICAgZXhwZWRpdG9yLkR1cmFUcmVlW1ZpcnR1ZXMuRk9SVElUVURFXS52YWx1ZSxcbiAgICAgIGV4cGVkaXRvci5EdXJhVHJlZVtWaXJ0dWVzLkNFTEVSSVRZXS52YWx1ZSxcbiAgICAgIGV4cGVkaXRvci5EdXJhVHJlZVtWaXJ0dWVzLlNPUkNFUlldLnZhbHVlLFxuICAgICAgZXhwZWRpdG9yLkR1cmFUcmVlW1ZpcnR1ZXMuU1VTVEVOQU5DRV0udmFsdWUsXG4gICAgICBjb21tZW50RmllbGQudmFsdWUsXG4gICAgICBkaXNjYXJkZWQuY2hlY2tlZFxuICAgICk7XG4gICAgLy8gbGV0IGZvb2QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShcInRlYW0tZm9vZFwiKVswXSBhcyBIVE1MSW5wdXRFbGVtZW50XG4gICAgLy8gbGV0IGF0a0xlZnQgPSBmb29kLnZhbHVlQXNOdW1iZXIvQm9zc01hbmFnZXIuZm9vZENvc3RcbiAgICAvLyBpZiAoZm9vZC52YWx1ZUFzTnVtYmVyID4gQm9zc01hbmFnZXIuZm9vZENvc3QgJiYgZGlzY2FyZGVkLmNoZWNrZWQpIHtcbiAgICAvLyAgICBmb29kLnZhbHVlID0gKGZvb2QudmFsdWVBc051bWJlciAtIEJvc3NNYW5hZ2VyLnJldHJ5KS50b1N0cmluZygpXG4gICAgLy8gfVxuICAgIC8vICAgICBpZiAoZm9vZC52YWx1ZUFzTnVtYmVyID4gQm9zc01hbmFnZXIuZm9vZENvc3QgJiYgIWRpc2NhcmRlZC5jaGVja2VkKSB7XG4gICAgLy8gICAgZm9vZC52YWx1ZSA9IChmb29kLnZhbHVlQXNOdW1iZXIgLSBCb3NzTWFuYWdlci5mb29kQ29zdCkudG9TdHJpbmcoKVxuICAgIC8vICAgICB9XG4gICAgXG4gICAgXG5cblxuICB9KTtcbn1cblxuLy8gVE9ET1xuLy8gc2luY2UgYWxsIGF0dGFja3JlbSBmdW5jIG1lcmdlZCBoZXJlLiB3aWxsIGJlIGdyZWF0IHRvIGltcGxlbWVudCBjYWxjdWxhdGlvbiBvbiB0aGUgZW5kIGRhdGUgb2Ygc2Vhc29uXG4vLyBmdW5jdGlvbiBpbnB1dENoYW5nZShlOiBIVE1MSW5wdXRFbGVtZW50KSB7XG4vLyAgIGlmIChlLnR5cGUgPT09IFwiZGF0ZXRpbWUtbG9jYWxcIikge1xuLy8gICAgIEFiRXguc3RhcnREID0gZS52YWx1ZUFzRGF0ZTtcbi8vICAgfSBlbHNlIHtcbi8vICAgICBlLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGUudmFsdWUpO1xuLy8gICB9XG4vLyB9XG4iXX0=