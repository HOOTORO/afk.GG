import { expeditor, team } from "../abex.js";
import { elBuilder } from "../components/builder.js";
import { exportToCsv } from "../components/csvexport.js";
import { newEl, newIn, newBtn } from "../components/helper.js";
import { elTag, Input } from "../model/constants.js";
import { Virtues } from "../types/virtue.js";
const outputTableId = "dps-table";
export function AttackForm() {
    const c = "attack-inputs", dataColumns = [
        "Team",
        "Pet",
        ...expeditor.DuraTree.map((x) => x.img().outerHTML),
        "Damage",
        "Comment",
    ];
    const addAttack = newBtn("Add Dmg", "add-attack md-button"), csvExport = newBtn("Export", "export-csv md-button"), treeDiv = newEl("div", { class: `team-set-inputs` });
    treeDiv.appendChild(expeditor.stamina.html());
    expeditor.DuraTree.forEach((x) => {
        treeDiv.appendChild(x.html());
    });
    const btnContainer = new elBuilder(elTag.Label)
        .add(addAttack)
        .add(csvExport)
        .html(), dpsLabel = new elBuilder(elTag.Label, { for: "dps" })
        .add(newIn(Input.Number, { class: `${c}__input`, id: "dps", step: "1000" }))
        .html(), comLabel = new elBuilder(elTag.Label, { for: "comm" })
        .add(newIn(Input.Text, { class: `${c}__input`, id: "comm" }))
        .html();
    dpsLabel.innerHTML += "Damage, B.";
    comLabel.innerHTML += "Comment";
    const atkF = new elBuilder(elTag.Form, {
        class: "team-set-inputs",
        id: "team-attacks-form",
    })
        .add(dpsLabel)
        .add(comLabel)
        .add(btnContainer)
        .html();
    const atkC = new elBuilder(elTag.Div, { class: c })
        .add(atkF)
        .add(newEl("h2", {}, "Set Food & Dura Tree"))
        .add(treeDiv)
        .html();
    document.getElementById("attack-app").appendChild(atkC);
    team.mount("team-set");
    const header = document
        .getElementById("team-attacks-form")
        .appendChild(newEl(elTag.Table, {
        id: outputTableId,
        class: "dps",
        style: "width:100%",
    }))
        .appendChild(newEl(elTag.Thead))
        .appendChild(newEl(elTag.tr));
    const body = document
        .getElementById("dps-table")
        .appendChild(newEl(elTag.Tbody));
    dataColumns.forEach((x) => header.appendChild(newEl(elTag.th, {}, x)));
    csvExport.addEventListener("click", (e) => {
        const o = team.damage.map((x) => [
            team.roster.map((y) => y.name).join("|"),
            team.beast.name,
            ...expeditor.DuraTree.map((v) => `${v.value}`),
            x[0].toString(),
            x[1].toString(),
        ]);
        exportToCsv("data.csv", o, dataColumns);
    });
    addAttack.addEventListener("click", (e) => {
        const tree = newEl(elTag.Div);
        expeditor.DuraTree.forEach((x) => {
            tree.appendChild(x.img());
            tree.innerHTML += `:${x.value}`;
        });
        team.appendResultRow(body, parseInt($("#dps").val().toString()), expeditor.DuraTree[Virtues.MIGHT].value, expeditor.DuraTree[Virtues.FORTITUDE].value, expeditor.DuraTree[Virtues.CELERITY].value, expeditor.DuraTree[Virtues.SORCERY].value, expeditor.DuraTree[Virtues.SUSTENANCE].value, $("#comm").val().toString());
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FiZXgvYXR0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDekQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFN0MsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDO0FBRWxDLE1BQU0sVUFBVSxVQUFVO0lBQ3hCLE1BQU0sQ0FBQyxHQUFHLGVBQWUsRUFDdkIsV0FBVyxHQUFHO1FBQ1osTUFBTTtRQUNOLEtBQUs7UUFDTCxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDO1FBQ25ELFFBQVE7UUFDUixTQUFTO0tBQ1YsQ0FBQztJQUVKLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsRUFDekQsU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsc0JBQXNCLENBQUMsRUFDcEQsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBRXZELE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lB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LENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQ3BDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFDdkMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUMzQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQzFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFDekMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUM1QyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQzVCLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlZGl0b3IsIHRlYW0gfSBmcm9tIFwiLi4vYWJleC5qc1wiO1xuaW1wb3J0IHsgZWxCdWlsZGVyIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnVpbGRlci5qc1wiO1xuaW1wb3J0IHsgZXhwb3J0VG9Dc3YgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jc3ZleHBvcnQuanNcIjtcbmltcG9ydCB7IG5ld0VsLCBuZXdJbiwgbmV3QnRuIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaGVscGVyLmpzXCI7XG5pbXBvcnQgeyBlbFRhZywgSW5wdXQgfSBmcm9tIFwiLi4vbW9kZWwvY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBWaXJ0dWVzIH0gZnJvbSBcIi4uL3R5cGVzL3ZpcnR1ZS5qc1wiO1xuXG5jb25zdCBvdXRwdXRUYWJsZUlkID0gXCJkcHMtdGFibGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEF0dGFja0Zvcm0oKSB7XG4gIGNvbnN0IGMgPSBcImF0dGFjay1pbnB1dHNcIixcbiAgICBkYXRhQ29sdW1ucyA9IFtcbiAgICAgIFwiVGVhbVwiLFxuICAgICAgXCJQZXRcIixcbiAgICAgIC4uLmV4cGVkaXRvci5EdXJhVHJlZS5tYXAoKHgpID0+IHguaW1nKCkub3V0ZXJIVE1MKSxcbiAgICAgIFwiRGFtYWdlXCIsXG4gICAgICBcIkNvbW1lbnRcIixcbiAgICBdO1xuXG4gIGNvbnN0IGFkZEF0dGFjayA9IG5ld0J0bihcIkFkZCBEbWdcIiwgXCJhZGQtYXR0YWNrIG1kLWJ1dHRvblwiKSxcbiAgICBjc3ZFeHBvcnQgPSBuZXdCdG4oXCJFeHBvcnRcIiwgXCJleHBvcnQtY3N2IG1kLWJ1dHRvblwiKSxcbiAgICB0cmVlRGl2ID0gbmV3RWwoXCJkaXZcIiwgeyBjbGFzczogYHRlYW0tc2V0LWlucHV0c2AgfSk7XG5cbiAgdHJlZURpdi5hcHBlbmRDaGlsZChleHBlZGl0b3Iuc3RhbWluYS5odG1sKCkpO1xuICBleHBlZGl0b3IuRHVyYVRyZWUuZm9yRWFjaCgoeCkgPT4ge1xuICAgIHRyZWVEaXYuYXBwZW5kQ2hpbGQoeC5odG1sKCkpO1xuICB9KTtcblxuICBjb25zdCBidG5Db250YWluZXIgPSBuZXcgZWxCdWlsZGVyKGVsVGFnLkxhYmVsKVxuICAgICAgLmFkZChhZGRBdHRhY2spXG4gICAgICAuYWRkKGNzdkV4cG9ydClcbiAgICAgIC5odG1sKCksXG4gICAgZHBzTGFiZWwgPSBuZXcgZWxCdWlsZGVyKGVsVGFnLkxhYmVsLCB7IGZvcjogXCJkcHNcIiB9KVxuICAgICAgLmFkZChcbiAgICAgICAgbmV3SW4oSW5wdXQuTnVtYmVyLCB7IGNsYXNzOiBgJHtjfV9faW5wdXRgLCBpZDogXCJkcHNcIiwgc3RlcDogXCIxMDAwXCIgfSlcbiAgICAgIClcbiAgICAgIC5odG1sKCksXG4gICAgY29tTGFiZWwgPSBuZXcgZWxCdWlsZGVyKGVsVGFnLkxhYmVsLCB7IGZvcjogXCJjb21tXCIgfSlcbiAgICAgIC5hZGQobmV3SW4oSW5wdXQuVGV4dCwgeyBjbGFzczogYCR7Y31fX2lucHV0YCwgaWQ6IFwiY29tbVwiIH0pKVxuICAgICAgLmh0bWwoKTtcbiAgZHBzTGFiZWwuaW5uZXJIVE1MICs9IFwiRGFtYWdlLCBCLlwiO1xuICBjb21MYWJlbC5pbm5lckhUTUwgKz0gXCJDb21tZW50XCI7XG5cbiAgY29uc3QgYXRrRiA9IG5ldyBlbEJ1aWxkZXIoZWxUYWcuRm9ybSwge1xuICAgIGNsYXNzOiBcInRlYW0tc2V0LWlucHV0c1wiLFxuICAgIGlkOiBcInRlYW0tYXR0YWNrcy1mb3JtXCIsXG4gIH0pXG4gICAgLmFkZChkcHNMYWJlbClcbiAgICAuYWRkKGNvbUxhYmVsKVxuICAgIC5hZGQoYnRuQ29udGFpbmVyKVxuICAgIC5odG1sKCk7XG5cbiAgY29uc3QgYXRrQyA9IG5ldyBlbEJ1aWxkZXIoZWxUYWcuRGl2LCB7IGNsYXNzOiBjIH0pXG4gICAgLmFkZChhdGtGKVxuICAgIC5hZGQobmV3RWwoXCJoMlwiLCB7fSwgXCJTZXQgRm9vZCAmIER1cmEgVHJlZVwiKSlcbiAgICAuYWRkKHRyZWVEaXYpXG4gICAgLmh0bWwoKTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImF0dGFjay1hcHBcIikuYXBwZW5kQ2hpbGQoYXRrQyk7XG4gIHRlYW0ubW91bnQoXCJ0ZWFtLXNldFwiKTtcblxuICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudFxuICAgIC5nZXRFbGVtZW50QnlJZChcInRlYW0tYXR0YWNrcy1mb3JtXCIpXG4gICAgLmFwcGVuZENoaWxkKFxuICAgICAgbmV3RWwoZWxUYWcuVGFibGUsIHtcbiAgICAgICAgaWQ6IG91dHB1dFRhYmxlSWQsXG4gICAgICAgIGNsYXNzOiBcImRwc1wiLFxuICAgICAgICBzdHlsZTogXCJ3aWR0aDoxMDAlXCIsXG4gICAgICB9KVxuICAgIClcbiAgICAuYXBwZW5kQ2hpbGQobmV3RWwoZWxUYWcuVGhlYWQpKVxuICAgIC5hcHBlbmRDaGlsZChuZXdFbChlbFRhZy50cikpO1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudEJ5SWQoXCJkcHMtdGFibGVcIilcbiAgICAuYXBwZW5kQ2hpbGQobmV3RWwoZWxUYWcuVGJvZHkpKTtcbiAgZGF0YUNvbHVtbnMuZm9yRWFjaCgoeCkgPT4gaGVhZGVyLmFwcGVuZENoaWxkKG5ld0VsKGVsVGFnLnRoLCB7fSwgeCkpKTtcblxuICBjc3ZFeHBvcnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgY29uc3QgbyA9IHRlYW0uZGFtYWdlLm1hcCgoeCkgPT4gW1xuICAgICAgdGVhbS5yb3N0ZXIubWFwKCh5KSA9PiB5Lm5hbWUpLmpvaW4oXCJ8XCIpLFxuICAgICAgdGVhbS5iZWFzdC5uYW1lLFxuICAgICAgLi4uZXhwZWRpdG9yLkR1cmFUcmVlLm1hcCgodikgPT4gYCR7di52YWx1ZX1gKSxcbiAgICAgIHhbMF0udG9TdHJpbmcoKSxcbiAgICAgIHhbMV0udG9TdHJpbmcoKSxcbiAgICBdKTtcbiAgICBleHBvcnRUb0NzdihcImRhdGEuY3N2XCIsIG8sIGRhdGFDb2x1bW5zKTtcbiAgfSk7XG5cbiAgYWRkQXR0YWNrLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGNvbnN0IHRyZWUgPSBuZXdFbChlbFRhZy5EaXYpO1xuICAgIGV4cGVkaXRvci5EdXJhVHJlZS5mb3JFYWNoKCh4KSA9PiB7XG4gICAgICB0cmVlLmFwcGVuZENoaWxkKHguaW1nKCkpO1xuICAgICAgdHJlZS5pbm5lckhUTUwgKz0gYDoke3gudmFsdWV9YDtcbiAgICB9KTtcblxuICAgIHRlYW0uYXBwZW5kUmVzdWx0Um93KFxuICAgICAgYm9keSxcbiAgICAgIHBhcnNlSW50KCQoXCIjZHBzXCIpLnZhbCgpLnRvU3RyaW5nKCkpLFxuICAgICAgZXhwZWRpdG9yLkR1cmFUcmVlW1ZpcnR1ZXMuTUlHSFRdLnZhbHVlLFxuICAgICAgZXhwZWRpdG9yLkR1cmFUcmVlW1ZpcnR1ZXMuRk9SVElUVURFXS52YWx1ZSxcbiAgICAgIGV4cGVkaXRvci5EdXJhVHJlZVtWaXJ0dWVzLkNFTEVSSVRZXS52YWx1ZSxcbiAgICAgIGV4cGVkaXRvci5EdXJhVHJlZVtWaXJ0dWVzLlNPUkNFUlldLnZhbHVlLFxuICAgICAgZXhwZWRpdG9yLkR1cmFUcmVlW1ZpcnR1ZXMuU1VTVEVOQU5DRV0udmFsdWUsXG4gICAgICAkKFwiI2NvbW1cIikudmFsKCkudG9TdHJpbmcoKVxuICAgICk7XG4gIH0pO1xufVxuIl19