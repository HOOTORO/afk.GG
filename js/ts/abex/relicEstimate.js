import { newEl } from "../components/helper.js";
import { elTag, relicEstimateTable } from "../model/constants.js";
import { expeditor } from "../abex.js";
const relApp = document.getElementById("relic-app");
export function RelicEstimator() {
    const expLabel = newEl("span", {
        class: "ui-output",
        style: "width:100%",
    }), out = newEl("output", { id: "expeditor-data" }), resultTable = newEl("table", {
        id: "final-table",
        style: "width:100%",
    }), userInput = newEl("div", { class: "ui-input" }, `<span class="ui-input__label">Essence & Towns</span>`), core = expeditor.inventory.html();
    userInput.appendChild(expeditor.essence.html());
    expeditor.captured.forEach((s) => {
        userInput.appendChild(s.html());
    });
    core.appendChild(userInput);
    relApp.appendChild(core);
    out.appendChild(resultTable);
    expLabel.appendChild(out);
    relApp.appendChild(expLabel);
}
export function loadBag() {
    const app = document.getElementById("relic-bag");
    const userBag = newEl(elTag.Div, { class: "user-bag" });
    expeditor.inventory.bag.forEach((x) => {
        const html = x.HTMLInput();
        userBag.appendChild(html);
    });
    app.appendChild(userBag);
    updateTableData();
}
export function updateTableData() {
    if (!relApp) {
        return;
    }
    document.getElementById("final-table").innerHTML = relicEstimateTable
        .replace("$inc", expeditor.EssenceIncome().toString())
        .replace("$tier", expeditor.DropTiers())
        .replace("$tw", expeditor.TotalCaptured())
        .replace("$gc", expeditor.MissEssence().toString())
        .replace("$tl", `${Math.floor(expeditor.Timeleft() / 24)} d. ${Math.round(expeditor.Timeleft() % 24)} h.`)
        .replace("$tg", expeditor.ReadyToSet())
        .replace("$drop", expeditor.DropTime())
        .replace("$toSell", expeditor.ToSell());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsaWNFc3RpbWF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hYmV4L3JlbGljRXN0aW1hdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXZDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFcEQsTUFBTSxVQUFVLGNBQWM7SUFDNUIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUMzQixLQUFLLEVBQUUsV0FBVztRQUNsQixLQUFLLEVBQUUsWUFBWTtLQUNwQixDQUFDLEVBQ0YsR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxFQUMvQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUMzQixFQUFFLEVBQUUsYUFBYTtRQUNqQixLQUFLLEVBQUUsWUFBWTtLQUNwQixDQUFDLEVBQ0YsU0FBUyxHQUFHLEtBQUssQ0FDZixLQUFLLEVBQ0wsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQ3JCLHNEQUFzRCxDQUN2RCxFQUNELElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXBDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRWhELFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV6QixHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdCLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU87SUFDckIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVqRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQVczQixPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QixlQUFlLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWU7SUFDN0IsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1osT0FBTztJQUNULENBQUM7SUFDRCxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxrQkFBa0I7U0FDbEUsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDckQsT0FBTyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDdkMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDekMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDbEQsT0FBTyxDQUNOLEtBQUssRUFDTCxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQ3ZELFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQzFCLEtBQUssQ0FDUDtTQUNBLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3RDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3RDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5ld0VsIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaGVscGVyLmpzXCI7XG5pbXBvcnQgeyBlbFRhZywgcmVsaWNFc3RpbWF0ZVRhYmxlIH0gZnJvbSBcIi4uL21vZGVsL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgZXhwZWRpdG9yIH0gZnJvbSBcIi4uL2FiZXguanNcIjtcblxuY29uc3QgcmVsQXBwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWxpYy1hcHBcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWxpY0VzdGltYXRvcigpIHtcbiAgY29uc3QgZXhwTGFiZWwgPSBuZXdFbChcInNwYW5cIiwge1xuICAgICAgY2xhc3M6IFwidWktb3V0cHV0XCIsXG4gICAgICBzdHlsZTogXCJ3aWR0aDoxMDAlXCIsXG4gICAgfSksXG4gICAgb3V0ID0gbmV3RWwoXCJvdXRwdXRcIiwgeyBpZDogXCJleHBlZGl0b3ItZGF0YVwiIH0pLFxuICAgIHJlc3VsdFRhYmxlID0gbmV3RWwoXCJ0YWJsZVwiLCB7XG4gICAgICBpZDogXCJmaW5hbC10YWJsZVwiLFxuICAgICAgc3R5bGU6IFwid2lkdGg6MTAwJVwiLFxuICAgIH0pLFxuICAgIHVzZXJJbnB1dCA9IG5ld0VsKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgY2xhc3M6IFwidWktaW5wdXRcIiB9LFxuICAgICAgYDxzcGFuIGNsYXNzPVwidWktaW5wdXRfX2xhYmVsXCI+RXNzZW5jZSAmIFRvd25zPC9zcGFuPmBcbiAgICApLFxuICAgIGNvcmUgPSBleHBlZGl0b3IuaW52ZW50b3J5Lmh0bWwoKTtcblxuICB1c2VySW5wdXQuYXBwZW5kQ2hpbGQoZXhwZWRpdG9yLmVzc2VuY2UuaHRtbCgpKTtcblxuICBleHBlZGl0b3IuY2FwdHVyZWQuZm9yRWFjaCgocykgPT4ge1xuICAgIHVzZXJJbnB1dC5hcHBlbmRDaGlsZChzLmh0bWwoKSk7XG4gIH0pO1xuXG4gIGNvcmUuYXBwZW5kQ2hpbGQodXNlcklucHV0KTtcbiAgcmVsQXBwLmFwcGVuZENoaWxkKGNvcmUpO1xuXG4gIG91dC5hcHBlbmRDaGlsZChyZXN1bHRUYWJsZSk7XG4gIGV4cExhYmVsLmFwcGVuZENoaWxkKG91dCk7XG4gIHJlbEFwcC5hcHBlbmRDaGlsZChleHBMYWJlbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkQmFnKCkge1xuICBjb25zdCBhcHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlbGljLWJhZ1wiKTtcblxuICBjb25zdCB1c2VyQmFnID0gbmV3RWwoZWxUYWcuRGl2LCB7IGNsYXNzOiBcInVzZXItYmFnXCIgfSk7XG4gIGV4cGVkaXRvci5pbnZlbnRvcnkuYmFnLmZvckVhY2goKHgpID0+IHtcbiAgICBjb25zdCBodG1sID0geC5IVE1MSW5wdXQoKTtcbiAgICAvLyBUT0RPOlxuICAgIC8vICogd2VsbCwgcG9vciBwZXJmb3JtXG4gICAgLy8gaHRtbC5pbnNlcnRCZWZvcmUoXG4gICAgLy8gICBuZXdFbChcbiAgICAvLyAgICAgZWxUYWcuRGl2LFxuICAgIC8vICAgICB7IGNsYXNzOiBcInJlbGljLXRvb2x0aXBcIiB9LFxuICAgIC8vICAgICBleHBlZGl0b3IuaW52ZW50b3J5LmNvbXBvbmVudHNEaWEoeCkub3V0ZXJIVE1MXG4gICAgLy8gICApLFxuICAgIC8vICAgaHRtbC5sYXN0Q2hpbGRcbiAgICAvLyApO1xuICAgIHVzZXJCYWcuYXBwZW5kQ2hpbGQoaHRtbCk7XG4gIH0pO1xuICBhcHAuYXBwZW5kQ2hpbGQodXNlckJhZyk7XG4gIHVwZGF0ZVRhYmxlRGF0YSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVGFibGVEYXRhKCkge1xuICBpZiAoIXJlbEFwcCkge1xuICAgIHJldHVybjtcbiAgfVxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbmFsLXRhYmxlXCIpLmlubmVySFRNTCA9IHJlbGljRXN0aW1hdGVUYWJsZVxuICAgIC5yZXBsYWNlKFwiJGluY1wiLCBleHBlZGl0b3IuRXNzZW5jZUluY29tZSgpLnRvU3RyaW5nKCkpXG4gICAgLnJlcGxhY2UoXCIkdGllclwiLCBleHBlZGl0b3IuRHJvcFRpZXJzKCkpXG4gICAgLnJlcGxhY2UoXCIkdHdcIiwgZXhwZWRpdG9yLlRvdGFsQ2FwdHVyZWQoKSlcbiAgICAucmVwbGFjZShcIiRnY1wiLCBleHBlZGl0b3IuTWlzc0Vzc2VuY2UoKS50b1N0cmluZygpKVxuICAgIC5yZXBsYWNlKFxuICAgICAgXCIkdGxcIixcbiAgICAgIGAke01hdGguZmxvb3IoZXhwZWRpdG9yLlRpbWVsZWZ0KCkgLyAyNCl9IGQuICR7TWF0aC5yb3VuZChcbiAgICAgICAgZXhwZWRpdG9yLlRpbWVsZWZ0KCkgJSAyNFxuICAgICAgKX0gaC5gXG4gICAgKVxuICAgIC5yZXBsYWNlKFwiJHRnXCIsIGV4cGVkaXRvci5SZWFkeVRvU2V0KCkpXG4gICAgLnJlcGxhY2UoXCIkZHJvcFwiLCBleHBlZGl0b3IuRHJvcFRpbWUoKSlcbiAgICAucmVwbGFjZShcIiR0b1NlbGxcIiwgZXhwZWRpdG9yLlRvU2VsbCgpKTtcbn1cbiJdfQ==