import { newEl, elTag } from "../components/helper.js";
import { relicEstimateTable } from "../model/constants.js";
import { expeditor } from "../abex.js";
const relApp = document.getElementById("relic-app");
export function RelicEstimator() {
    const expLabel = newEl("span", {
        class: "ui-output",
        style: "width:100%",
    }), out = newEl("output", { id: "expeditor-data" }), resultTable = newEl("table", {
        id: "final-table",
        style: "width:100%",
    }), userInput = newEl("div", { class: "ui-input" }, `<span class="ui-input__label">Essence & Towns</span>`), core = expeditor.inventory.html();
    userInput.appendChild(expeditor.essence.html());
    expeditor.captured.forEach((s) => {
        userInput.appendChild(s.html());
    });
    core.appendChild(userInput);
    relApp.appendChild(core);
    out.appendChild(resultTable);
    expLabel.appendChild(out);
    relApp.appendChild(expLabel);
}
export function loadBag() {
    const app = document.getElementById("relic-bag");
    const userBag = newEl(elTag.Div, { class: "user-bag" });
    expeditor.inventory.bag.forEach((x) => {
        const html = x.HTMLInput();
        userBag.appendChild(html);
    });
    app.appendChild(userBag);
    updateTableData();
}
export function updateTableData() {
    document.getElementById("final-table").innerHTML = relicEstimateTable
        .replace("$inc", expeditor.EssenceIncome().toString())
        .replace("$tier", expeditor.DropTiers())
        .replace("$tw", expeditor.TotalCaptured())
        .replace("$gc", expeditor.MissEssence().toString())
        .replace("$tl", expeditor.Timeleft().toPrecision(2))
        .replace("$tg", expeditor.ReadyToSet())
        .replace("$drop", expeditor.DropTime())
        .replace("$toSell", expeditor.ToSell());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsaWNFc3RpbWF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hYmV4L3JlbGljRXN0aW1hdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXZDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFcEQsTUFBTSxVQUFVLGNBQWM7SUFDNUIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUMzQixLQUFLLEVBQUUsV0FBVztRQUNsQixLQUFLLEVBQUUsWUFBWTtLQUNwQixDQUFDLEVBQ0YsR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxFQUMvQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUMzQixFQUFFLEVBQUUsYUFBYTtRQUNqQixLQUFLLEVBQUUsWUFBWTtLQUNwQixDQUFDLEVBQ0YsU0FBUyxHQUFHLEtBQUssQ0FDZixLQUFLLEVBQ0wsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQ3JCLHNEQUFzRCxDQUN2RCxFQUNELElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXBDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRWhELFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV6QixHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdCLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU87SUFDckIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVqRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQVczQixPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QixlQUFlLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWU7SUFDN0IsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLEdBQUcsa0JBQWtCO1NBQ2xFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3JELE9BQU8sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ3ZDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3pDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2xELE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuRCxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUN0QyxPQUFPLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN0QyxPQUFPLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdFbCwgZWxUYWcgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9oZWxwZXIuanNcIjtcbmltcG9ydCB7IHJlbGljRXN0aW1hdGVUYWJsZSB9IGZyb20gXCIuLi9tb2RlbC9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IGV4cGVkaXRvciB9IGZyb20gXCIuLi9hYmV4LmpzXCI7XG5cbmNvbnN0IHJlbEFwcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVsaWMtYXBwXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gUmVsaWNFc3RpbWF0b3IoKSB7XG4gIGNvbnN0IGV4cExhYmVsID0gbmV3RWwoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzOiBcInVpLW91dHB1dFwiLFxuICAgICAgc3R5bGU6IFwid2lkdGg6MTAwJVwiLFxuICAgIH0pLFxuICAgIG91dCA9IG5ld0VsKFwib3V0cHV0XCIsIHsgaWQ6IFwiZXhwZWRpdG9yLWRhdGFcIiB9KSxcbiAgICByZXN1bHRUYWJsZSA9IG5ld0VsKFwidGFibGVcIiwge1xuICAgICAgaWQ6IFwiZmluYWwtdGFibGVcIixcbiAgICAgIHN0eWxlOiBcIndpZHRoOjEwMCVcIixcbiAgICB9KSxcbiAgICB1c2VySW5wdXQgPSBuZXdFbChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IGNsYXNzOiBcInVpLWlucHV0XCIgfSxcbiAgICAgIGA8c3BhbiBjbGFzcz1cInVpLWlucHV0X19sYWJlbFwiPkVzc2VuY2UgJiBUb3duczwvc3Bhbj5gXG4gICAgKSxcbiAgICBjb3JlID0gZXhwZWRpdG9yLmludmVudG9yeS5odG1sKCk7XG5cbiAgdXNlcklucHV0LmFwcGVuZENoaWxkKGV4cGVkaXRvci5lc3NlbmNlLmh0bWwoKSk7XG5cbiAgZXhwZWRpdG9yLmNhcHR1cmVkLmZvckVhY2goKHMpID0+IHtcbiAgICB1c2VySW5wdXQuYXBwZW5kQ2hpbGQocy5odG1sKCkpO1xuICB9KTtcblxuICBjb3JlLmFwcGVuZENoaWxkKHVzZXJJbnB1dCk7XG4gIHJlbEFwcC5hcHBlbmRDaGlsZChjb3JlKTtcblxuICBvdXQuYXBwZW5kQ2hpbGQocmVzdWx0VGFibGUpO1xuICBleHBMYWJlbC5hcHBlbmRDaGlsZChvdXQpO1xuICByZWxBcHAuYXBwZW5kQ2hpbGQoZXhwTGFiZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEJhZygpIHtcbiAgY29uc3QgYXBwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWxpYy1iYWdcIik7XG5cbiAgY29uc3QgdXNlckJhZyA9IG5ld0VsKGVsVGFnLkRpdiwgeyBjbGFzczogXCJ1c2VyLWJhZ1wiIH0pO1xuICBleHBlZGl0b3IuaW52ZW50b3J5LmJhZy5mb3JFYWNoKCh4KSA9PiB7XG4gICAgY29uc3QgaHRtbCA9IHguSFRNTElucHV0KCk7XG4gICAgLy8gVE9ETzpcbiAgICAvLyAqIHdlbGwsIHBvb3IgcGVyZm9ybVxuICAgIC8vIGh0bWwuaW5zZXJ0QmVmb3JlKFxuICAgIC8vICAgbmV3RWwoXG4gICAgLy8gICAgIGVsVGFnLkRpdixcbiAgICAvLyAgICAgeyBjbGFzczogXCJyZWxpYy10b29sdGlwXCIgfSxcbiAgICAvLyAgICAgZXhwZWRpdG9yLmludmVudG9yeS5jb21wb25lbnRzRGlhKHgpLm91dGVySFRNTFxuICAgIC8vICAgKSxcbiAgICAvLyAgIGh0bWwubGFzdENoaWxkXG4gICAgLy8gKTtcbiAgICB1c2VyQmFnLmFwcGVuZENoaWxkKGh0bWwpO1xuICB9KTtcbiAgYXBwLmFwcGVuZENoaWxkKHVzZXJCYWcpO1xuICB1cGRhdGVUYWJsZURhdGEoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVRhYmxlRGF0YSgpIHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaW5hbC10YWJsZVwiKS5pbm5lckhUTUwgPSByZWxpY0VzdGltYXRlVGFibGVcbiAgICAucmVwbGFjZShcIiRpbmNcIiwgZXhwZWRpdG9yLkVzc2VuY2VJbmNvbWUoKS50b1N0cmluZygpKVxuICAgIC5yZXBsYWNlKFwiJHRpZXJcIiwgZXhwZWRpdG9yLkRyb3BUaWVycygpKVxuICAgIC5yZXBsYWNlKFwiJHR3XCIsIGV4cGVkaXRvci5Ub3RhbENhcHR1cmVkKCkpXG4gICAgLnJlcGxhY2UoXCIkZ2NcIiwgZXhwZWRpdG9yLk1pc3NFc3NlbmNlKCkudG9TdHJpbmcoKSlcbiAgICAucmVwbGFjZShcIiR0bFwiLCBleHBlZGl0b3IuVGltZWxlZnQoKS50b1ByZWNpc2lvbigyKSlcbiAgICAucmVwbGFjZShcIiR0Z1wiLCBleHBlZGl0b3IuUmVhZHlUb1NldCgpKVxuICAgIC5yZXBsYWNlKFwiJGRyb3BcIiwgZXhwZWRpdG9yLkRyb3BUaW1lKCkpXG4gICAgLnJlcGxhY2UoXCIkdG9TZWxsXCIsIGV4cGVkaXRvci5Ub1NlbGwoKSk7XG59XG4iXX0=