import { expeditor } from "../abex.js";
import { elBuilder } from "../components/builder.js";
import { Boss, elTag, Input, AbEx } from "../model/constants.js";
export function foodRemain() {
    const app = document.getElementById("rem-food");
    if (!app) {
        console.log(`no app tag, return`);
    }
    else {
        initForm(app);
        window.onload = updateAbex;
        app.addEventListener("input", (e) => {
            if (e.target instanceof HTMLInputElement) {
                inputChange(e.target);
                updateAbex();
            }
        });
    }
}
function updateAbex() {
    let totalFood = expeditor.SilentStam();
    let atl = totalFood / Boss.foodCost;
    let rtyLeft = (totalFood % Boss.foodCost) / Boss.retry;
    document.getElementById("total-food").innerText =
        Math.floor(totalFood).toString();
    document.getElementById("attack-left").innerText = Math.floor(atl).toString();
    document.getElementById("retry-lim").innerText = rtyLeft.toFixed(1);
}
function initForm(n) {
    const form = new elBuilder(elTag.Form, { class: "team-set-inputs" })
        .add(elTag.Input, { type: Input.Datetime, id: "abex-date" }, "Season start")
        .add(expeditor.stamina.html())
        .add(expeditor.guild.specs.html())
        .add(expeditor.star.html())
        .html(), out = new elBuilder(elTag.Div, { class: "outbox" })
        .add(elTag.Span, { id: `total-food` }, "Food")
        .add(elTag.Span, { id: `attack-left` }, "Left")
        .add(elTag.Span, { id: `retry-lim` }, "Retries")
        .html();
    n.appendChild(form);
    n.appendChild(out);
}
function inputChange(e) {
    if (e.type === "datetime-local") {
        AbEx.startD = e.valueAsDate;
    }
    else {
        e.setAttribute("value", e.value);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cnlheWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYWJleC9yZXRyeWF5YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFakUsTUFBTSxVQUFVLFVBQVU7SUFDeEIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNoRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDcEMsQ0FBQztTQUFNLENBQUM7UUFDTixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZCxNQUFNLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztRQUUzQixHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLENBQUMsTUFBTSxZQUFZLGdCQUFnQixFQUFFLENBQUM7Z0JBQ3pDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RCLFVBQVUsRUFBRSxDQUFDO1lBQ2YsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQUNILENBQUM7QUFDRCxTQUFTLFVBQVU7SUFZakIsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3ZDLElBQUksR0FBRyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3BDLElBQUksT0FBTyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBRXZELFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUztRQUM3QyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25DLFFBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsQ0FBYztJQUM5QixNQUFNLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLENBQUM7U0FDL0QsR0FBRyxDQUNGLEtBQUssQ0FBQyxLQUFLLEVBQ1gsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQ3pDLGNBQWMsQ0FDZjtTQUNBLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzdCLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNqQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQixJQUFJLEVBQUUsRUFDVCxHQUFHLEdBQUcsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQztTQUNoRCxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxNQUFNLENBQUM7U0FDN0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLEVBQUUsTUFBTSxDQUFDO1NBQzlDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLFNBQVMsQ0FBQztTQUMvQyxJQUFJLEVBQUUsQ0FBQztJQUdaLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsQ0FBbUI7SUFDdEMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLGdCQUFnQixFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQzlCLENBQUM7U0FBTSxDQUFDO1FBQ04sQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWRpdG9yIH0gZnJvbSBcIi4uL2FiZXguanNcIjtcbmltcG9ydCB7IGVsQnVpbGRlciB9IGZyb20gXCIuLi9jb21wb25lbnRzL2J1aWxkZXIuanNcIjtcbmltcG9ydCB7IEJvc3MsIGVsVGFnLCBJbnB1dCwgQWJFeCB9IGZyb20gXCIuLi9tb2RlbC9jb25zdGFudHMuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZvb2RSZW1haW4oKSB7XG4gIGNvbnN0IGFwcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVtLWZvb2RcIik7XG4gIGlmICghYXBwKSB7XG4gICAgY29uc29sZS5sb2coYG5vIGFwcCB0YWcsIHJldHVybmApO1xuICB9IGVsc2Uge1xuICAgIGluaXRGb3JtKGFwcCk7XG4gICAgd2luZG93Lm9ubG9hZCA9IHVwZGF0ZUFiZXg7XG5cbiAgICBhcHAuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChlKSA9PiB7XG4gICAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgIGlucHV0Q2hhbmdlKGUudGFyZ2V0KTtcbiAgICAgICAgdXBkYXRlQWJleCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVBYmV4KCkge1xuICAvLyB1cGRhdGV2YWx1ZXJzXG4gIC8vIG1pbC52aWV3ZXJzID0gcGFyc2VJbnQoXG4gIC8vICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtaWwtc3BlY3NcIikuZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbiAgLy8gKTtcbiAgLy8gY29uc3Qgc29kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtaWwtc29kXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gIC8vIGV4cGVkaXRvci5zdGFyLnN0YXR1cyA9IHNvZC5jaGVja2VkO1xuICAvLyBleHBlZGl0b3Iuc3RhbWluYS52YWx1ZSA9IHBhcnNlSW50KFxuICAvLyAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXgtZm9vZFwiKS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuICAvLyApO1xuXG4gIC8vIGNhbGN1bGF0aW9uc1xuICBsZXQgdG90YWxGb29kID0gZXhwZWRpdG9yLlNpbGVudFN0YW0oKTtcbiAgbGV0IGF0bCA9IHRvdGFsRm9vZCAvIEJvc3MuZm9vZENvc3Q7XG4gIGxldCBydHlMZWZ0ID0gKHRvdGFsRm9vZCAlIEJvc3MuZm9vZENvc3QpIC8gQm9zcy5yZXRyeTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGFsLWZvb2RcIikuaW5uZXJUZXh0ID1cbiAgICBNYXRoLmZsb29yKHRvdGFsRm9vZCkudG9TdHJpbmcoKTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhdHRhY2stbGVmdFwiKS5pbm5lclRleHQgPSBNYXRoLmZsb29yKGF0bCkudG9TdHJpbmcoKTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXRyeS1saW1cIikuaW5uZXJUZXh0ID0gcnR5TGVmdC50b0ZpeGVkKDEpO1xufVxuXG5mdW5jdGlvbiBpbml0Rm9ybShuOiBIVE1MRWxlbWVudCkge1xuICBjb25zdCBmb3JtID0gbmV3IGVsQnVpbGRlcihlbFRhZy5Gb3JtLCB7IGNsYXNzOiBcInRlYW0tc2V0LWlucHV0c1wiIH0pIC8vaWQ6IFwiYWJleC1mb3JtXCIsXG4gICAgICAuYWRkKFxuICAgICAgICBlbFRhZy5JbnB1dCxcbiAgICAgICAgeyB0eXBlOiBJbnB1dC5EYXRldGltZSwgaWQ6IFwiYWJleC1kYXRlXCIgfSxcbiAgICAgICAgXCJTZWFzb24gc3RhcnRcIlxuICAgICAgKVxuICAgICAgLmFkZChleHBlZGl0b3Iuc3RhbWluYS5odG1sKCkpXG4gICAgICAuYWRkKGV4cGVkaXRvci5ndWlsZC5zcGVjcy5odG1sKCkpXG4gICAgICAuYWRkKGV4cGVkaXRvci5zdGFyLmh0bWwoKSlcbiAgICAgIC5odG1sKCksXG4gICAgb3V0ID0gbmV3IGVsQnVpbGRlcihlbFRhZy5EaXYsIHsgY2xhc3M6IFwib3V0Ym94XCIgfSlcbiAgICAgIC5hZGQoZWxUYWcuU3BhbiwgeyBpZDogYHRvdGFsLWZvb2RgIH0sIFwiRm9vZFwiKVxuICAgICAgLmFkZChlbFRhZy5TcGFuLCB7IGlkOiBgYXR0YWNrLWxlZnRgIH0sIFwiTGVmdFwiKVxuICAgICAgLmFkZChlbFRhZy5TcGFuLCB7IGlkOiBgcmV0cnktbGltYCB9LCBcIlJldHJpZXNcIilcbiAgICAgIC5odG1sKCk7XG5cbiAgLy8gY29uc3Qgb3V0cHV0RmllbGRzID0gW1wiVG90YWwgRm9vZFwiLCBcIkF0dGFja3MgbGVmdFwiLCBcIlJldHJ5IEJyZWFrcG9pbnRcIl1cbiAgbi5hcHBlbmRDaGlsZChmb3JtKTtcbiAgbi5hcHBlbmRDaGlsZChvdXQpO1xufVxuXG5mdW5jdGlvbiBpbnB1dENoYW5nZShlOiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gIGlmIChlLnR5cGUgPT09IFwiZGF0ZXRpbWUtbG9jYWxcIikge1xuICAgIEFiRXguc3RhcnREID0gZS52YWx1ZUFzRGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBlLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGUudmFsdWUpO1xuICB9XG59XG4iXX0=