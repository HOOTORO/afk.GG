import { DustChest } from "./types.js";
export var elTag;
(function (elTag) {
    elTag["Input"] = "input";
    elTag["Div"] = "div";
    elTag["Span"] = "span";
    elTag["Label"] = "label";
    elTag["Select"] = "select";
    elTag["Option"] = "option";
    elTag["Form"] = "form";
    elTag["Img"] = "img";
    elTag["tr"] = "tr";
    elTag["td"] = "td";
    elTag["th"] = "th";
    elTag["Table"] = "table";
    elTag["Thead"] = "thead";
    elTag["Tbody"] = "tbody";
    elTag["Button"] = "button";
    elTag["Output"] = "output";
})(elTag || (elTag = {}));
export var elProp;
(function (elProp) {
    elProp["Id"] = "id";
    elProp["Class"] = "class";
    elProp["For"] = "for";
    elProp["Alt"] = "alt";
    elProp["Src"] = "src";
    elProp["Width"] = "width";
    elProp["Style"] = "style";
    elProp["Type"] = "type";
})(elProp || (elProp = {}));
export var Input;
(function (Input) {
    Input["Number"] = "number";
    Input["Text"] = "text";
    Input["CheckBox"] = "checkbox";
    Input["Datetime"] = "datetime-local";
})(Input || (Input = {}));
export const RelicBase = 18;
export const AbExSellModifier = 0.4;
export const aeIcons = {
    stam: "https://i.imgur.com/n5WOzSZ.png",
    coin: "https://i.imgur.com/Gw216PZ.png",
    ess: "https://i.imgur.com/Gw216PZ.png",
};
const relicEstimateTable = `
  <thead>
    <tr>
      <th align="center" colspan=4>Expeditor Data</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align=center>Income</td>
      <td align=center> <img src=${aeIcons.coin} width=20></td>
      <td align=center>Relic Type</td>
      <td align=center>Drop Timers</td>
    </tr>
    <tr>
      <td align=center><b>[ $tw settlements ]</b></td>
      <td align=center>$inc</td>
      <td align=center>$tier</td>
      <td align=center>$drop</td>
    </tr>
    <tr>
          <td align=center colspan=4>GOAL</td>
    </tr>
    <tr>
      <td colspan=2>Remain</td>
      <td colspan=1><img src=${aeIcons.coin} width=20 style="margin-left:20px"></td>
      <td colspan=1>TIME</td>
    </tr>        
    <tr>
       <td colspan=2></td>
       <td colspan=1>$gc</td>
      <td colspan=1>$tl</td>
    </tr>    
    <tr>
      <td align=center colspan=4>BAG</td>
    </tr>
      <tr>
        <td align=center colspan=1>KEEP</td>
        <td align=center colspan=3>$tg</td>
      </tr>

      <tr>
        <td align=center colspan=1>SELL♻️</td>
        <td align=right colspan=3>$toSell</td>
      </tr>
  </tbody>

`;
class Period {
    static hour = 1;
    static day = 24 * this.hour;
    static week = 7 * this.day;
    static month = 30 * this.day;
}
const iconSize = 38;
class AfkArena {
    static levelup = 44500;
    static dustInc() {
        const base = 1167 / Period.day, fos = base * 1.6 + 385 / Period.day;
        return base + fos;
    }
    static storeDust() {
        return 500 / Period.day;
    }
    static fastRewards() {
        return (this.dustInc() * 2) / Period.day;
    }
    static storeDiDeal() {
        return new DustChest(3, 8).dust() / Period.day;
    }
    static subsChest() {
        return new DustChest(2, 6).dust() / Period.day;
    }
    static dailyPile() {
        return new DustChest(1, 2).dust() / Period.day;
    }
    static mistyValley() {
        const base = new DustChest(12, 8);
        const firstReward = new DustChest(12, 8);
        return (base.dust() + firstReward.dust()) / Period.month;
    }
}
class AbEx {
    static now = new Date();
    static abexDurationDays = 19;
    static silentDay = 1;
    static spectatorMod = 1.2;
    static sodFastenMod = 0.9;
    static startD = new Date();
    static start() {
        return new Date();
    }
    static left() {
        return new Date(this.startD.getUTCFullYear(), this.startD.getUTCMonth(), this.startD.getUTCDate() + this.abexDurationDays, this.startD.getUTCHours(), this.startD.getUTCMinutes());
    }
    static silentHoursIn() {
        return new Date(this.startD.getUTCFullYear(), this.startD.getUTCMonth(), this.startD.getUTCDate() - this.silentDay, this.startD.getUTCHours(), this.startD.getUTCMinutes());
    }
    static hoursLeft() {
        return ((this.silentHoursIn().getTime() - this.now.getTime()) / 1000 / 60 / 60);
    }
}
class Boss {
    static foodCost = 48;
    static retry = 4;
}
class ValueModes extends AfkArena {
    static rSources = [
        {
            id: "cursed-realm",
            label: "Cursed Realm",
            tableName: "CR",
            period: 7,
            display: true,
        },
        {
            id: "treasure-scramble",
            label: "Treasure Scramble",
            tableName: "TS",
            period: 7,
            display: true,
        },
        {
            id: "nightmare-corridor",
            label: "Nightmare Corridor",
            tableName: "NC",
            period: 7,
            display: true,
        },
        {
            id: "afk-income",
            label: "Base AFK Income",
            tableName: "AFK",
            period: 1 / 24,
            display: false,
        },
    ];
    static gMode(x) {
        const source = this.rSources.find((y) => y.id === x || y.label === x || y.tableName === x);
        if (!source) {
            throw new Error("Unknown Source Mode");
        }
        return Object.values(GameMode).find((y) => y === source.tableName);
    }
}
const allRes = [
    "dia",
    "bait",
    "redc",
    "yells",
    "emblcc",
    "timee",
    "stars",
    "poe",
    "dust",
    "twise",
    "mythfs",
    "secrs",
];
var GameMode;
(function (GameMode) {
    GameMode["CR"] = "CR";
    GameMode["TS"] = "TS";
    GameMode["NC"] = "NC";
    GameMode["all"] = "all";
})(GameMode || (GameMode = {}));
const verb = true;
const sheetId = "1_L4LmobsOtmVeBi3RwTCespyMq4vZLSJT1E-QOsXpoY";
const base = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?`;
const query = encodeURIComponent("Select *");
const url = function (x) {
    return `${base}&sheet=${x}&tq=${query}`;
};
export { AbEx, AfkArena, Boss, GameMode, Period, ValueModes, allRes, base, iconSize, query, relicEstimateTable, sheetId, url, verb, };
//# sourceMappingURL=data:application/json;base64,