import { DustChest } from "./types.js";
const verb = true;
export var elTag;
(function (elTag) {
    elTag["Input"] = "input";
    elTag["Div"] = "div";
    elTag["Span"] = "span";
    elTag["Label"] = "label";
    elTag["Select"] = "select";
    elTag["Option"] = "option";
    elTag["Form"] = "form";
    elTag["Img"] = "img";
    elTag["tr"] = "tr";
    elTag["td"] = "td";
    elTag["th"] = "th";
    elTag["Table"] = "table";
    elTag["Thead"] = "thead";
    elTag["Tbody"] = "tbody";
    elTag["Button"] = "button";
    elTag["Output"] = "output";
})(elTag || (elTag = {}));
export var elProp;
(function (elProp) {
    elProp["Id"] = "id";
    elProp["Class"] = "class";
    elProp["For"] = "for";
    elProp["Alt"] = "alt";
    elProp["Src"] = "src";
    elProp["Width"] = "width";
    elProp["Style"] = "style";
    elProp["Type"] = "type";
})(elProp || (elProp = {}));
export var Input;
(function (Input) {
    Input["Number"] = "number";
    Input["Text"] = "text";
    Input["CheckBox"] = "checkbox";
    Input["Datetime"] = "datetime-local";
})(Input || (Input = {}));
export const RelicBase = 18;
export const AbExSellModifier = 0.4;
export const aeIcons = {
    stam: "https://i.imgur.com/n5WOzSZ.png",
    coin: "https://i.imgur.com/Gw216PZ.png",
    ess: "https://i.imgur.com/Gw216PZ.png",
};
const relicEstimateTable = `
  <thead>
    <tr>
      <th align="center" colspan=4>Expeditor Data</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align=center>Income</td>
      <td align=center> <img src=${aeIcons.coin} width=20></td>
      <td align=center>Relic Type</td>
      <td align=center>Drop Timers</td>
    </tr>
    <tr>
      <td align=center><b>[ $tw settlements ]</b></td>
      <td align=center>$inc</td>
      <td align=center>$tier</td>
      <td align=center>$drop</td>
    </tr>
    <tr>
          <td align=center colspan=4>GOAL</td>
    </tr>
    <tr>
      <td colspan=2>Remain</td>
      <td colspan=1><img src=${aeIcons.coin} width=20 style="margin-left:20px"></td>
      <td colspan=1>TIME</td>
    </tr>        
    <tr>
       <td colspan=2></td>
       <td colspan=1>$gc</td>
      <td colspan=1>$tl</td>
    </tr>    
    <tr>
      <td align=center colspan=4>BAG</td>
    </tr>
      <tr>
        <td align=center colspan=1>KEEP</td>
        <td align=center colspan=3>$tg</td>
      </tr>

      <tr>
        <td align=center colspan=1>SELL♻️</td>
        <td align=right colspan=3>$toSell</td>
      </tr>
  </tbody>

`;
class Period {
    static hour = 1;
    static day = 24 * this.hour;
    static week = 7 * this.day;
    static month = 30 * this.day;
}
const iconSize = 38;
class AfkArena {
    static levelup = 44500;
    static dustInc() {
        const base = 1167 / Period.day, fos = base * 1.6 + 385 / Period.day;
        return base + fos;
    }
    static storeDust() {
        return 500 / Period.day;
    }
    static fastRewards() {
        return (this.dustInc() * 2) / Period.day;
    }
    static storeDiDeal() {
        return new DustChest(3, 8).dust() / Period.day;
    }
    static subsChest() {
        return new DustChest(2, 6).dust() / Period.day;
    }
    static mistyValley() {
        const base = new DustChest(12, 8);
        const firstReward = new DustChest(12, 8);
        return (base.dust() + firstReward.dust()) / Period.month;
    }
}
class AbEx {
    static now = new Date();
    static abexDurationDays = 19;
    static silentDay = 1;
    static spectatorMod = 1.2;
    static sodFastenMod = 0.9;
    static startD = new Date();
    static silentHoursIn() {
        return new Date(this.startD.getUTCFullYear(), this.startD.getUTCMonth(), this.startD.getUTCDate() - this.silentDay, this.startD.getUTCHours(), this.startD.getUTCMinutes());
    }
    static hoursLeft() {
        return ((this.silentHoursIn().getTime() - this.now.getTime()) / 1000 / 60 / 60);
    }
}
const allRes = [
    "dia",
    "bait",
    "redc",
    "yells",
    "emblcc",
    "timee",
    "stars",
    "poe",
    "dust",
    "twise",
    "mythfs",
    "secrs",
];
const query = encodeURIComponent("Select *");
export { AbEx, AfkArena, Period, allRes, iconSize, query, relicEstimateTable, verb, };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZGVsL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXZDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztBQUVsQixNQUFNLENBQU4sSUFBWSxLQW1CWDtBQW5CRCxXQUFZLEtBQUs7SUFDZix3QkFBZSxDQUFBO0lBQ2Ysb0JBQVcsQ0FBQTtJQUVYLHNCQUFhLENBQUE7SUFDYix3QkFBZSxDQUFBO0lBQ2YsMEJBQWlCLENBQUE7SUFFakIsMEJBQWlCLENBQUE7SUFDakIsc0JBQWEsQ0FBQTtJQUNiLG9CQUFXLENBQUE7SUFDWCxrQkFBUyxDQUFBO0lBQ1Qsa0JBQVMsQ0FBQTtJQUNULGtCQUFTLENBQUE7SUFDVCx3QkFBZSxDQUFBO0lBQ2Ysd0JBQWUsQ0FBQTtJQUNmLHdCQUFlLENBQUE7SUFDZiwwQkFBaUIsQ0FBQTtJQUNqQiwwQkFBaUIsQ0FBQTtBQUNuQixDQUFDLEVBbkJXLEtBQUssS0FBTCxLQUFLLFFBbUJoQjtBQUVELE1BQU0sQ0FBTixJQUFZLE1BU1g7QUFURCxXQUFZLE1BQU07SUFDaEIsbUJBQVMsQ0FBQTtJQUNULHlCQUFlLENBQUE7SUFDZixxQkFBVyxDQUFBO0lBQ1gscUJBQVcsQ0FBQTtJQUNYLHFCQUFXLENBQUE7SUFDWCx5QkFBZSxDQUFBO0lBQ2YseUJBQWUsQ0FBQTtJQUNmLHVCQUFhLENBQUE7QUFDZixDQUFDLEVBVFcsTUFBTSxLQUFOLE1BQU0sUUFTakI7QUFDRCxNQUFNLENBQU4sSUFBWSxLQUtYO0FBTEQsV0FBWSxLQUFLO0lBQ2YsMEJBQWlCLENBQUE7SUFDakIsc0JBQWEsQ0FBQTtJQUNiLDhCQUFxQixDQUFBO0lBQ3JCLG9DQUEyQixDQUFBO0FBQzdCLENBQUMsRUFMVyxLQUFLLEtBQUwsS0FBSyxRQUtoQjtBQUNELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDNUIsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixJQUFJLEVBQUUsaUNBQWlDO0lBQ3ZDLElBQUksRUFBRSxpQ0FBaUM7SUFDdkMsR0FBRyxFQUFFLGlDQUFpQztDQUN2QyxDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBRzs7Ozs7Ozs7O21DQVNRLE9BQU8sQ0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7K0JBZWhCLE9BQU8sQ0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBc0IxQyxDQUFDO0FBZ0JGLE1BQU0sTUFBTTtJQUNWLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDNUIsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUMzQixNQUFNLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDOztBQUcvQixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFFcEIsTUFBTSxRQUFRO0lBQ1osTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFdkIsTUFBTSxDQUFDLE9BQU87UUFDWixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFDNUIsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDdEMsT0FBTyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUztRQUNkLE9BQU8sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVc7UUFDaEIsT0FBTyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNqRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVM7UUFDZCxPQUFPLElBQUksU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2pELENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVztRQUNoQixNQUFNLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMzRCxDQUFDOztBQUdILE1BQU0sSUFBSTtJQUNSLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUN4QixNQUFNLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO0lBQzFCLE1BQU0sQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO0lBQzFCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUUzQixNQUFNLENBQUMsYUFBYTtRQUNsQixPQUFPLElBQUksSUFBSSxDQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEVBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUztRQUNkLE9BQU8sQ0FDTCxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQ3ZFLENBQUM7SUFDSixDQUFDOztBQUtILE1BQU0sTUFBTSxHQUFHO0lBQ2IsS0FBSztJQUNMLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLEtBQUs7SUFDTCxNQUFNO0lBQ04sT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0NBQ1IsQ0FBQztBQUVGLE1BQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTdDLE9BQU8sRUFDTCxJQUFJLEVBQ0osUUFBUSxFQUNSLE1BQU0sRUFDTixNQUFNLEVBQ04sUUFBUSxFQUNSLEtBQUssRUFDTCxrQkFBa0IsRUFDbEIsSUFBSSxHQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEdXN0Q2hlc3QgfSBmcm9tIFwiLi90eXBlcy5qc1wiO1xuXG5jb25zdCB2ZXJiID0gdHJ1ZTtcblxuZXhwb3J0IGVudW0gZWxUYWcge1xuICBJbnB1dCA9IFwiaW5wdXRcIixcbiAgRGl2ID0gXCJkaXZcIixcblxuICBTcGFuID0gXCJzcGFuXCIsXG4gIExhYmVsID0gXCJsYWJlbFwiLFxuICBTZWxlY3QgPSBcInNlbGVjdFwiLFxuXG4gIE9wdGlvbiA9IFwib3B0aW9uXCIsXG4gIEZvcm0gPSBcImZvcm1cIixcbiAgSW1nID0gXCJpbWdcIixcbiAgdHIgPSBcInRyXCIsXG4gIHRkID0gXCJ0ZFwiLFxuICB0aCA9IFwidGhcIixcbiAgVGFibGUgPSBcInRhYmxlXCIsXG4gIFRoZWFkID0gXCJ0aGVhZFwiLFxuICBUYm9keSA9IFwidGJvZHlcIixcbiAgQnV0dG9uID0gXCJidXR0b25cIixcbiAgT3V0cHV0ID0gXCJvdXRwdXRcIixcbn1cblxuZXhwb3J0IGVudW0gZWxQcm9wIHtcbiAgSWQgPSBcImlkXCIsXG4gIENsYXNzID0gXCJjbGFzc1wiLFxuICBGb3IgPSBcImZvclwiLFxuICBBbHQgPSBcImFsdFwiLFxuICBTcmMgPSBcInNyY1wiLFxuICBXaWR0aCA9IFwid2lkdGhcIixcbiAgU3R5bGUgPSBcInN0eWxlXCIsXG4gIFR5cGUgPSBcInR5cGVcIixcbn1cbmV4cG9ydCBlbnVtIElucHV0IHtcbiAgTnVtYmVyID0gXCJudW1iZXJcIixcbiAgVGV4dCA9IFwidGV4dFwiLFxuICBDaGVja0JveCA9IFwiY2hlY2tib3hcIixcbiAgRGF0ZXRpbWUgPSBcImRhdGV0aW1lLWxvY2FsXCIsXG59XG5leHBvcnQgY29uc3QgUmVsaWNCYXNlID0gMTg7XG5leHBvcnQgY29uc3QgQWJFeFNlbGxNb2RpZmllciA9IDAuNDtcblxuZXhwb3J0IGNvbnN0IGFlSWNvbnMgPSB7XG4gIHN0YW06IFwiaHR0cHM6Ly9pLmltZ3VyLmNvbS9uNVdPelNaLnBuZ1wiLFxuICBjb2luOiBcImh0dHBzOi8vaS5pbWd1ci5jb20vR3cyMTZQWi5wbmdcIixcbiAgZXNzOiBcImh0dHBzOi8vaS5pbWd1ci5jb20vR3cyMTZQWi5wbmdcIixcbn07XG5cbmNvbnN0IHJlbGljRXN0aW1hdGVUYWJsZSA9IGBcbiAgPHRoZWFkPlxuICAgIDx0cj5cbiAgICAgIDx0aCBhbGlnbj1cImNlbnRlclwiIGNvbHNwYW49ND5FeHBlZGl0b3IgRGF0YTwvdGg+XG4gICAgPC90cj5cbiAgPC90aGVhZD5cbiAgPHRib2R5PlxuICAgIDx0cj5cbiAgICAgIDx0ZCBhbGlnbj1jZW50ZXI+SW5jb21lPC90ZD5cbiAgICAgIDx0ZCBhbGlnbj1jZW50ZXI+IDxpbWcgc3JjPSR7YWVJY29ucy5jb2lufSB3aWR0aD0yMD48L3RkPlxuICAgICAgPHRkIGFsaWduPWNlbnRlcj5SZWxpYyBUeXBlPC90ZD5cbiAgICAgIDx0ZCBhbGlnbj1jZW50ZXI+RHJvcCBUaW1lcnM8L3RkPlxuICAgIDwvdHI+XG4gICAgPHRyPlxuICAgICAgPHRkIGFsaWduPWNlbnRlcj48Yj5bICR0dyBzZXR0bGVtZW50cyBdPC9iPjwvdGQ+XG4gICAgICA8dGQgYWxpZ249Y2VudGVyPiRpbmM8L3RkPlxuICAgICAgPHRkIGFsaWduPWNlbnRlcj4kdGllcjwvdGQ+XG4gICAgICA8dGQgYWxpZ249Y2VudGVyPiRkcm9wPC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICAgICAgICA8dGQgYWxpZ249Y2VudGVyIGNvbHNwYW49ND5HT0FMPC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICAgIDx0ZCBjb2xzcGFuPTI+UmVtYWluPC90ZD5cbiAgICAgIDx0ZCBjb2xzcGFuPTE+PGltZyBzcmM9JHthZUljb25zLmNvaW59IHdpZHRoPTIwIHN0eWxlPVwibWFyZ2luLWxlZnQ6MjBweFwiPjwvdGQ+XG4gICAgICA8dGQgY29sc3Bhbj0xPlRJTUU8L3RkPlxuICAgIDwvdHI+ICAgICAgICBcbiAgICA8dHI+XG4gICAgICAgPHRkIGNvbHNwYW49Mj48L3RkPlxuICAgICAgIDx0ZCBjb2xzcGFuPTE+JGdjPC90ZD5cbiAgICAgIDx0ZCBjb2xzcGFuPTE+JHRsPC90ZD5cbiAgICA8L3RyPiAgICBcbiAgICA8dHI+XG4gICAgICA8dGQgYWxpZ249Y2VudGVyIGNvbHNwYW49ND5CQUc8L3RkPlxuICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBhbGlnbj1jZW50ZXIgY29sc3Bhbj0xPktFRVA8L3RkPlxuICAgICAgICA8dGQgYWxpZ249Y2VudGVyIGNvbHNwYW49Mz4kdGc8L3RkPlxuICAgICAgPC90cj5cblxuICAgICAgPHRyPlxuICAgICAgICA8dGQgYWxpZ249Y2VudGVyIGNvbHNwYW49MT5TRUxM4pm777iPPC90ZD5cbiAgICAgICAgPHRkIGFsaWduPXJpZ2h0IGNvbHNwYW49Mz4kdG9TZWxsPC90ZD5cbiAgICAgIDwvdHI+XG4gIDwvdGJvZHk+XG5cbmA7XG5cbi8vIGNvbnN0IEZsYXdsZXNzRHJvcGxldHMgPSB7XG4vLyAgICAgICBFOiAxLFxuLy8gICAgICAgXCJFK1wiOiAxLFxuLy8gICAgICAgTDogNCxcbi8vICAgICAgIFwiTCtcIjogMixcbi8vICAgICAgIE06IDgsXG4vLyAgICAgICBcIk0rXCI6IDgsXG4vLyAgICAgICBBOiA0LFxuLy8gICAgICAgQTE6IDIsXG4vLyAgICAgICBBMjogMixcbi8vICAgICAgIEEzOiAyLFxuLy8gICAgICAgQTQ6IDIsXG4vLyAgICAgICBBNTogMixcbi8vICAgICB9O1xuY2xhc3MgUGVyaW9kIHtcbiAgc3RhdGljIGhvdXIgPSAxO1xuICBzdGF0aWMgZGF5ID0gMjQgKiB0aGlzLmhvdXI7XG4gIHN0YXRpYyB3ZWVrID0gNyAqIHRoaXMuZGF5O1xuICBzdGF0aWMgbW9udGggPSAzMCAqIHRoaXMuZGF5O1xufVxuXG5jb25zdCBpY29uU2l6ZSA9IDM4O1xuXG5jbGFzcyBBZmtBcmVuYSB7XG4gIHN0YXRpYyBsZXZlbHVwID0gNDQ1MDA7XG5cbiAgc3RhdGljIGR1c3RJbmMoKSB7XG4gICAgY29uc3QgYmFzZSA9IDExNjcgLyBQZXJpb2QuZGF5LFxuICAgICAgZm9zID0gYmFzZSAqIDEuNiArIDM4NSAvIFBlcmlvZC5kYXk7XG4gICAgcmV0dXJuIGJhc2UgKyBmb3M7XG4gIH1cblxuICBzdGF0aWMgc3RvcmVEdXN0KCkge1xuICAgIHJldHVybiA1MDAgLyBQZXJpb2QuZGF5O1xuICB9XG5cbiAgc3RhdGljIGZhc3RSZXdhcmRzKCkge1xuICAgIHJldHVybiAodGhpcy5kdXN0SW5jKCkgKiAyKSAvIFBlcmlvZC5kYXk7XG4gIH1cblxuICBzdGF0aWMgc3RvcmVEaURlYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBEdXN0Q2hlc3QoMywgOCkuZHVzdCgpIC8gUGVyaW9kLmRheTtcbiAgfVxuXG4gIHN0YXRpYyBzdWJzQ2hlc3QoKSB7XG4gICAgcmV0dXJuIG5ldyBEdXN0Q2hlc3QoMiwgNikuZHVzdCgpIC8gUGVyaW9kLmRheTtcbiAgfVxuXG4gIHN0YXRpYyBtaXN0eVZhbGxleSgpIHtcbiAgICBjb25zdCBiYXNlID0gbmV3IER1c3RDaGVzdCgxMiwgOCk7XG4gICAgY29uc3QgZmlyc3RSZXdhcmQgPSBuZXcgRHVzdENoZXN0KDEyLCA4KTtcbiAgICByZXR1cm4gKGJhc2UuZHVzdCgpICsgZmlyc3RSZXdhcmQuZHVzdCgpKSAvIFBlcmlvZC5tb250aDtcbiAgfVxufVxuXG5jbGFzcyBBYkV4IHtcbiAgc3RhdGljIG5vdyA9IG5ldyBEYXRlKCk7XG4gIHN0YXRpYyBhYmV4RHVyYXRpb25EYXlzID0gMTk7XG4gIHN0YXRpYyBzaWxlbnREYXkgPSAxO1xuICBzdGF0aWMgc3BlY3RhdG9yTW9kID0gMS4yO1xuICBzdGF0aWMgc29kRmFzdGVuTW9kID0gMC45O1xuICBzdGF0aWMgc3RhcnREID0gbmV3IERhdGUoKTtcblxuICBzdGF0aWMgc2lsZW50SG91cnNJbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoXG4gICAgICB0aGlzLnN0YXJ0RC5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgdGhpcy5zdGFydEQuZ2V0VVRDTW9udGgoKSxcbiAgICAgIHRoaXMuc3RhcnRELmdldFVUQ0RhdGUoKSAtIHRoaXMuc2lsZW50RGF5LFxuICAgICAgdGhpcy5zdGFydEQuZ2V0VVRDSG91cnMoKSxcbiAgICAgIHRoaXMuc3RhcnRELmdldFVUQ01pbnV0ZXMoKVxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgaG91cnNMZWZ0KCkge1xuICAgIHJldHVybiAoXG4gICAgICAodGhpcy5zaWxlbnRIb3Vyc0luKCkuZ2V0VGltZSgpIC0gdGhpcy5ub3cuZ2V0VGltZSgpKSAvIDEwMDAgLyA2MCAvIDYwXG4gICAgKTtcbiAgfVxufVxuXG4vL1xuXG5jb25zdCBhbGxSZXMgPSBbXG4gIFwiZGlhXCIsXG4gIFwiYmFpdFwiLFxuICBcInJlZGNcIixcbiAgXCJ5ZWxsc1wiLFxuICBcImVtYmxjY1wiLFxuICBcInRpbWVlXCIsXG4gIFwic3RhcnNcIixcbiAgXCJwb2VcIixcbiAgXCJkdXN0XCIsXG4gIFwidHdpc2VcIixcbiAgXCJteXRoZnNcIixcbiAgXCJzZWNyc1wiLFxuXTtcblxuY29uc3QgcXVlcnkgPSBlbmNvZGVVUklDb21wb25lbnQoXCJTZWxlY3QgKlwiKTtcblxuZXhwb3J0IHtcbiAgQWJFeCxcbiAgQWZrQXJlbmEsXG4gIFBlcmlvZCxcbiAgYWxsUmVzLFxuICBpY29uU2l6ZSxcbiAgcXVlcnksXG4gIHJlbGljRXN0aW1hdGVUYWJsZSxcbiAgdmVyYixcbn07XG4iXX0=