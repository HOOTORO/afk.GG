import { rewards } from "../components/dataloader.js";
import { generateAFKResObj, rangeSlide } from "../components/helper.js";
import { AfkArena, ValueModes, allRes, sheetId } from "./constants.js";
class DustChest {
    amount;
    hours;
    constructor(qty, type) {
        this.amount = qty;
        this.hours = type;
    }
    dust() {
        return this.amount * this.hours * AfkArena.dustInc();
    }
}
class BaseResource {
    type;
    label;
    img;
}
class BaseResQty extends BaseResource {
    amount;
}
class User {
    spreadSheetId;
    leaderboard;
    income;
    constructor(gSheetId = sheetId) {
        this.spreadSheetId = gSheetId;
        this.leaderboard = [];
        this.income = allRes.map((v) => generateAFKResObj(v));
    }
    set reward(val) {
        if (!val)
            return;
        const existingResult = this.leaderboard.find((x) => x.mode === val?.mode);
        if (!existingResult) {
            this.leaderboard.push(val);
        }
        else {
            existingResult.rank = val.rank;
            existingResult.rewards = val?.rewards;
        }
    }
    loadLocal() {
        this.leaderboard = ValueModes.emuns().map((x) => {
            const val = localStorage.getItem(x.id);
            return {
                mode: x.table,
                rank: val,
                rewards: rewards.find((v) => v.mode === ValueModes.gMode(x.id))
                    ?.rewards,
            };
        });
        if (this.leaderboard) {
            const rang = localStorage.getItem("rangeValue");
            if (!rang) {
                return;
            }
            $("input.range").attr("value", rang);
            rangeSlide(rang, this);
            this.calc();
        }
    }
    calc() {
        this.income = allRes.map((v) => generateAFKResObj(v));
        this.leaderboard.forEach((x) => {
            x?.rewards?.forEach((r) => {
                const ex = this.income.findIndex((k) => k.type === r.type);
                if (ex > -1) {
                    this.income[ex].amount += r.amount;
                }
            });
        });
    }
}
export { BaseResQty, BaseResource, DustChest, User };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbW9kZWwvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQVEsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFrQjdFLE1BQU0sU0FBUztJQUNiLE1BQU0sQ0FBUztJQUNmLEtBQUssQ0FBUTtJQUNiLFlBQVksR0FBVyxFQUFFLElBQVc7UUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUNELElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdkQsQ0FBQztDQUNGO0FBRUQsTUFBTSxZQUFZO0lBQ2hCLElBQUksQ0FBWTtJQUNoQixLQUFLLENBQVM7SUFDZCxHQUFHLENBQVM7Q0FDYjtBQUNELE1BQU0sVUFBVyxTQUFRLFlBQVk7SUFDbkMsTUFBTSxDQUFTO0NBQ2hCO0FBRUQsTUFBTSxJQUFJO0lBQ1IsYUFBYSxDQUFTO0lBQ3RCLFdBQVcsQ0FBZTtJQUMxQixNQUFNLENBQWU7SUFFckIsWUFBWSxXQUFtQixPQUFPO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO1FBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsSUFBSSxNQUFNLENBQUMsR0FBZTtRQUN4QixJQUFJLENBQUMsR0FBRztZQUFFLE9BQU87UUFDakIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDO2FBQU0sQ0FBQztZQUNOLGNBQWMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztZQUMvQixjQUFjLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxPQUFPLENBQUM7UUFDeEMsQ0FBQztJQUNILENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDOUMsTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkMsT0FBTztnQkFDTCxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUs7Z0JBQ2IsSUFBSSxFQUFFLEdBQUc7Z0JBQ1QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQzdELEVBQUUsT0FBTzthQUNFLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDVixPQUFPO1lBQ1QsQ0FBQztZQUNELENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFDRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDeEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMzRCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO29CQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQ3JDLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFzQixJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGVycm9yIH0gZnJvbSBcIm5vZGU6Y29uc29sZVwiO1xuaW1wb3J0IHsgcmV3YXJkcyB9IGZyb20gXCIuLi9jb21wb25lbnRzL2RhdGFsb2FkZXIuanNcIjtcbmltcG9ydCB7IGdlbmVyYXRlQUZLUmVzT2JqLCByYW5nZVNsaWRlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaGVscGVyLmpzXCI7XG5pbXBvcnQgeyBBZmtBcmVuYSwgVmFsdWVNb2RlcywgYWxsUmVzLCBicmVzLCBzaGVldElkIH0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5cbi8vIFRZUEVTIC8vXG5cbnR5cGUgaG91cnMgPSAyIHwgNiB8IDggfCAyNDtcblxuLy8gSU5URVJGQUNFUyAvL1xuaW50ZXJmYWNlIEdzaGVldCB7XG4gIGNvbHM6IEFycmF5PHsgaWQ6IHN0cmluZzsgbGFiZWw6IHN0cmluZzsgdHlwZTogc3RyaW5nIH0+O1xuICByb3dzOiBBcnJheTx7IGM6IEFycmF5PHsgdjogc3RyaW5nOyBmOiBzdHJpbmcgfT4gfT47XG59XG5pbnRlcmZhY2UgUmFua1Jld2FyZCB7XG4gIG1vZGU6IHN0cmluZztcbiAgcmFuazogc3RyaW5nO1xuICByZXdhcmRzOiBCYXNlUmVzUXR5W107XG59XG5cbi8vIENMQVNTRVMgLy9cbmNsYXNzIER1c3RDaGVzdCB7XG4gIGFtb3VudDogbnVtYmVyO1xuICBob3VyczogaG91cnM7XG4gIGNvbnN0cnVjdG9yKHF0eTogbnVtYmVyLCB0eXBlOiBob3Vycykge1xuICAgIHRoaXMuYW1vdW50ID0gcXR5O1xuICAgIHRoaXMuaG91cnMgPSB0eXBlO1xuICB9XG4gIGR1c3QoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5hbW91bnQgKiB0aGlzLmhvdXJzICogQWZrQXJlbmEuZHVzdEluYygpO1xuICB9XG59XG5cbmNsYXNzIEJhc2VSZXNvdXJjZSB7XG4gIHR5cGU6IGAke2JyZXN9YDtcbiAgbGFiZWw6IHN0cmluZztcbiAgaW1nOiBzdHJpbmc7XG59XG5jbGFzcyBCYXNlUmVzUXR5IGV4dGVuZHMgQmFzZVJlc291cmNlIHtcbiAgYW1vdW50OiBudW1iZXI7XG59XG5cbmNsYXNzIFVzZXIge1xuICBzcHJlYWRTaGVldElkOiBzdHJpbmc7XG4gIGxlYWRlcmJvYXJkOiBSYW5rUmV3YXJkW107XG4gIGluY29tZTogQmFzZVJlc1F0eVtdO1xuXG4gIGNvbnN0cnVjdG9yKGdTaGVldElkOiBzdHJpbmcgPSBzaGVldElkKSB7XG4gICAgdGhpcy5zcHJlYWRTaGVldElkID0gZ1NoZWV0SWQ7XG4gICAgdGhpcy5sZWFkZXJib2FyZCA9IFtdO1xuICAgIHRoaXMuaW5jb21lID0gYWxsUmVzLm1hcCgodikgPT4gZ2VuZXJhdGVBRktSZXNPYmoodikpO1xuICB9XG4gIHNldCByZXdhcmQodmFsOiBSYW5rUmV3YXJkKSB7XG4gICAgaWYgKCF2YWwpIHJldHVybjtcbiAgICBjb25zdCBleGlzdGluZ1Jlc3VsdCA9IHRoaXMubGVhZGVyYm9hcmQuZmluZCgoeCkgPT4geC5tb2RlID09PSB2YWw/Lm1vZGUpO1xuICAgIGlmICghZXhpc3RpbmdSZXN1bHQpIHtcbiAgICAgIHRoaXMubGVhZGVyYm9hcmQucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZ1Jlc3VsdC5yYW5rID0gdmFsLnJhbms7XG4gICAgICBleGlzdGluZ1Jlc3VsdC5yZXdhcmRzID0gdmFsPy5yZXdhcmRzO1xuICAgIH1cbiAgfVxuXG4gIGxvYWRMb2NhbCgpOiB2b2lkIHtcbiAgICB0aGlzLmxlYWRlcmJvYXJkID0gVmFsdWVNb2Rlcy5lbXVucygpLm1hcCgoeCkgPT4ge1xuICAgICAgY29uc3QgdmFsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oeC5pZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb2RlOiB4LnRhYmxlLFxuICAgICAgICByYW5rOiB2YWwsXG4gICAgICAgIHJld2FyZHM6IHJld2FyZHMuZmluZCgodikgPT4gdi5tb2RlID09PSBWYWx1ZU1vZGVzLmdNb2RlKHguaWQpKVxuICAgICAgICAgID8ucmV3YXJkcyxcbiAgICAgIH0gYXMgUmFua1Jld2FyZDtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5sZWFkZXJib2FyZCkge1xuICAgICAgY29uc3QgcmFuZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwicmFuZ2VWYWx1ZVwiKTtcbiAgICAgIGlmICghcmFuZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkKFwiaW5wdXQucmFuZ2VcIikuYXR0cihcInZhbHVlXCIsIHJhbmcpO1xuICAgICAgcmFuZ2VTbGlkZShyYW5nLCB0aGlzKTtcbiAgICAgIHRoaXMuY2FsYygpO1xuICAgIH1cbiAgfVxuICBjYWxjKCk6IHZvaWQge1xuICAgIHRoaXMuaW5jb21lID0gYWxsUmVzLm1hcCgodikgPT4gZ2VuZXJhdGVBRktSZXNPYmoodikpO1xuICAgIHRoaXMubGVhZGVyYm9hcmQuZm9yRWFjaCgoeCkgPT4ge1xuICAgICAgeD8ucmV3YXJkcz8uZm9yRWFjaCgocikgPT4ge1xuICAgICAgICBjb25zdCBleCA9IHRoaXMuaW5jb21lLmZpbmRJbmRleCgoaykgPT4gay50eXBlID09PSByLnR5cGUpO1xuICAgICAgICBpZiAoZXggPiAtMSkge1xuICAgICAgICAgIHRoaXMuaW5jb21lW2V4XS5hbW91bnQgKz0gci5hbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IEJhc2VSZXNRdHksIEJhc2VSZXNvdXJjZSwgRHVzdENoZXN0LCBHc2hlZXQsIFJhbmtSZXdhcmQsIFVzZXIgfTtcbiJdfQ==