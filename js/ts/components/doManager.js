import { iconSize } from "../model/constants.js";
import { elProp, elTag } from "./helper.js";
function createElem(t, attr, ch) {
    const doc = document.createElement(t);
    if (Array.isArray(attr) && attr.length > 0) {
        for (const a of attr) {
            doc.setAttribute(a.n, a.v);
        }
    }
    else if (attr && "n" in attr) {
        doc.setAttribute(attr.n, attr.v);
    }
    if (Array.isArray(ch) && ch.length > 0) {
        for (const c of ch) {
            doc.appendChild(document.createElement(c));
        }
    }
    return doc;
}
function genId(s) {
    return s.toLowerCase().replaceAll(" ", "-");
}
function buildElement(el, properties, labelText) {
    const container = createElem(elTag.Div);
    const doc = document.createElement(el);
    container.appendChild(doc);
    if (properties && properties.length > 0) {
        for (const p of properties) {
            const fn = processSpecialProp(p);
            fn(doc);
        }
        container.appendChild(doc);
        if (labelText) {
            container.setAttribute(elProp.Class, "labeled-container");
            let label = createElem(elTag.Span);
            label.innerText = labelText;
            container.insertBefore(label, container.firstChild);
        }
        return container;
    }
}
function buildProperty(k, val) {
    return { n: k, v: val };
}
function processSpecialProp(p) {
    let r = p.n === "icon";
    if (r) {
        return (y) => {
            const img = createElem(elTag.Img, [
                buildProperty(elProp.Alt, p.n),
                buildProperty(elProp.Src, p.v),
                buildProperty(elProp.Width, iconSize.toString()),
            ]);
            y.parentNode.insertBefore(img, y);
        };
    }
    else {
        return (y) => {
            y.setAttribute(p.n, p.v);
        };
    }
}
export { elProp, buildElement, buildProperty, createElem, genId, };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9NYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZG9NYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQyxPQUFPLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUzQyxTQUFTLFVBQVUsQ0FBQyxDQUFTLEVBQUUsSUFBb0IsRUFBRSxFQUFZO0lBQy9ELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDM0MsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNyQixHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLENBQUM7SUFDSCxDQUFDO1NBQU0sSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3ZDLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7WUFDbkIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLEtBQUssQ0FBQyxDQUFTO0lBQ3RCLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEVBQVMsRUFBRSxVQUFtQixFQUFFLFNBQWtCO0lBQ3RFLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEMsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDeEMsS0FBSyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUMzQixNQUFNLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixDQUFDO1FBQ0QsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2QsU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDMUQsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQyxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUM1QixTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEQsQ0FBQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsQ0FBUyxFQUFFLEdBQVc7SUFDM0MsT0FBTyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBUyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLENBQU87SUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUM7SUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNOLE9BQU8sQ0FBQyxDQUFjLEVBQUUsRUFBRTtZQUN4QixNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtnQkFDaEMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ2pELENBQUMsQ0FBQztZQUNILENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUM7SUFDSixDQUFDO1NBQU0sQ0FBQztRQUNOLE9BQU8sQ0FBQyxDQUFjLEVBQUUsRUFBRTtZQUN4QixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDO0FBRUQsT0FBTyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ1osYUFBYSxFQUNiLFVBQVUsRUFDVixLQUFLLEdBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aWNvblNpemV9IGZyb20gXCIuLi9tb2RlbC9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7cHJvcH0gZnJvbSBcIi4uL21vZGVsL3R5cGVzLmpzXCI7XG5pbXBvcnQge2VsUHJvcCwgZWxUYWcgfSBmcm9tIFwiLi9oZWxwZXIuanNcIjtcblxuZnVuY3Rpb24gY3JlYXRlRWxlbSh0OiBzdHJpbmcsIGF0dHI/OiBwcm9wIHwgcHJvcFtdLCBjaD86IGVsVGFnW10pIHtcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXR0cikgJiYgYXR0ci5sZW5ndGggPiAwKSB7XG4gICAgZm9yIChjb25zdCBhIG9mIGF0dHIpIHtcbiAgICAgIGRvYy5zZXRBdHRyaWJ1dGUoYS5uLCBhLnYpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhdHRyICYmIFwiblwiIGluIGF0dHIpIHtcbiAgICBkb2Muc2V0QXR0cmlidXRlKGF0dHIubiwgYXR0ci52KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShjaCkgJiYgY2gubGVuZ3RoID4gMCkge1xuICAgIGZvciAoY29uc3QgYyBvZiBjaCkge1xuICAgICAgZG9jLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZG9jO1xufVxuXG5mdW5jdGlvbiBnZW5JZChzOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHMudG9Mb3dlckNhc2UoKS5yZXBsYWNlQWxsKFwiIFwiLCBcIi1cIik7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRWxlbWVudChlbDogZWxUYWcsIHByb3BlcnRpZXM/OiBwcm9wW10sIGxhYmVsVGV4dD86IHN0cmluZykge1xuICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVFbGVtKGVsVGFnLkRpdik7XG4gIGNvbnN0IGRvYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWwpO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZG9jKTtcbiAgaWYgKHByb3BlcnRpZXMgJiYgcHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgZm9yIChjb25zdCBwIG9mIHByb3BlcnRpZXMpIHtcbiAgICAgIGNvbnN0IGZuID0gcHJvY2Vzc1NwZWNpYWxQcm9wKHApO1xuICAgICAgZm4oZG9jKTtcbiAgICB9XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRvYyk7XG4gICAgaWYgKGxhYmVsVGV4dCkge1xuICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShlbFByb3AuQ2xhc3MsIFwibGFiZWxlZC1jb250YWluZXJcIik7XG4gICAgICBsZXQgbGFiZWwgPSBjcmVhdGVFbGVtKGVsVGFnLlNwYW4pO1xuICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gbGFiZWxUZXh0O1xuICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShsYWJlbCwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUHJvcGVydHkoazogc3RyaW5nLCB2YWw6IHN0cmluZykge1xuICByZXR1cm4ge246IGssIHY6IHZhbH0gYXMgcHJvcDtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1NwZWNpYWxQcm9wKHA6IHByb3ApIHtcbiAgbGV0IHIgPSBwLm4gPT09IFwiaWNvblwiO1xuICBpZiAocikge1xuICAgIHJldHVybiAoeTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IGltZyA9IGNyZWF0ZUVsZW0oZWxUYWcuSW1nLCBbXG4gICAgICAgIGJ1aWxkUHJvcGVydHkoZWxQcm9wLkFsdCwgcC5uKSxcbiAgICAgICAgYnVpbGRQcm9wZXJ0eShlbFByb3AuU3JjLCBwLnYpLFxuICAgICAgICBidWlsZFByb3BlcnR5KGVsUHJvcC5XaWR0aCwgaWNvblNpemUudG9TdHJpbmcoKSksXG4gICAgICBdKTtcbiAgICAgIHkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaW1nLCB5KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoeTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIHkuc2V0QXR0cmlidXRlKHAubiwgcC52KTtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGVsUHJvcCxcbiAgYnVpbGRFbGVtZW50LFxuICBidWlsZFByb3BlcnR5LFxuICBjcmVhdGVFbGVtLFxuICBnZW5JZCxcbn07XG4iXX0=