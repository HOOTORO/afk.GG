import { elProp, elTag, verb } from "../model/constants.js";
import { updateResourceBox } from "./output.js";
export const log = (x) => {
    if (verb) {
        console.log(x);
    }
};
function generateAFKResObj(x) {
    const gid = x.toLowerCase().replace(/ /g, "-"), short = x
        .split(" ")
        .map((v, i) => {
        if (i > 0) {
            return v.charAt(0).toLowerCase();
        }
        else {
            return v.toLowerCase().substring(0, 4);
        }
    })
        .join("");
    const br = {
        type: gid,
        label: short,
        img: `../assets/icons/s/${short}.png`,
        amount: 0,
    };
    return br;
}
function weekLabels(n, stops) {
    let html = "";
    for (let i = 1; i <= n; i++) {
        if (stops.some((v) => v.n === i)) {
            html += `<option value="${i.toString()}" label="${stops.find((v) => v.n === i)?.desc}"></option>`;
        }
        else {
            html += `<option value="${i.toString()}" label=""></option>`;
        }
    }
    return html;
}
function rangeSlide(value, user) {
    $("rangeValue").html(value + " weeks");
    $(this).attr("value", value?.toString());
    populateStorage("rangeValue", value);
    updateResourceBox(user.income, parseInt(value));
}
function createSelectList(name, options) {
    const list = document.createElement("select");
    list.id = name;
    for (const opt of options) {
        list.appendChild(newEl("option", { value: opt.toString() }, opt.toString()));
    }
    const localVal = storedValue(name);
    if (localVal && options.findIndex((x) => x === localVal) !== -1) {
        list.options.item(options.findIndex((x) => x === localVal)).selected = true;
    }
    else {
        list.options.item(0).setAttribute("selected", "");
    }
    return list;
}
export { createSelectList, generateAFKResObj, hasEmpty, populateStorage, rangeSlide, savedObj, setApp, weekLabels, buttonWrapInput, };
export function newIn(fieldType, attrs) {
    attrs["type"] = fieldType;
    return newEl("input", { ...attrs });
}
export function newEl(tag, props, inner) {
    const doc = document.createElement(tag);
    if (props) {
        Object.entries(props).forEach((k) => {
            if (k[1] != undefined) {
                doc.setAttribute(k[0], k[1]);
            }
        });
    }
    if (inner) {
        doc.innerHTML = inner;
    }
    return doc;
}
export function newBtn(text, c, id) {
    let attrs = {};
    attrs[elProp.Type] = "button";
    if (c) {
        attrs[elProp.Class] = c;
    }
    if (id) {
        attrs[elProp.Id] = id;
    }
    return newEl(elTag.Button, attrs, text);
}
function buttonWrapInput(el, update) {
    let input = el;
    const wrap = newEl("div", { class: "number-input" }), incBtn = newBtn("<", `desc ${el.className}`), descBtn = newBtn(">", `inc ${el.className}`);
    wrap.appendChild(incBtn);
    wrap.appendChild(el);
    wrap.appendChild(descBtn);
    wrap.addEventListener("click", (e) => {
        e.preventDefault();
        if (e.target instanceof HTMLButtonElement) {
            if (e.target.className.includes("desc") && input.valueAsNumber >= 0) {
                input.stepDown();
            }
            else {
                input.stepUp();
            }
            update(input.valueAsNumber);
        }
    });
    input.addEventListener("input", () => {
        update(input.valueAsNumber);
    });
    return wrap;
}
export function storedValue(inputId, value) {
    if (value >= 0 || value) {
        try {
            const str = JSON.stringify(value);
            localStorage.setItem(inputId, str);
        }
        catch (e) {
            console.log(`save error ${e}`);
            return false;
        }
        return true;
    }
    const v = localStorage.getItem(inputId);
    return v ? v : false;
}
function savedObj(str, def) {
    if (storedValue(str)) {
        return Object.assign(def, JSON.parse(storedValue(str).toString()));
    }
    return def;
}
function setApp(key) {
    const storedVal = localStorage.getItem(key);
    $(`#${key} option[value="${storedVal}"]`).first().attr("selected", "");
}
function populateStorage(key, value) {
    if (key && value) {
        localStorage.setItem(key, value);
        setApp(key);
    }
}
function hasEmpty(obj) {
    return (Object.keys(obj).length === 0 &&
        Object.values(obj).some((x) => x === null || x === 0 || x === undefined));
}
export function safeSum(n) {
    if (n.length > 0 && !hasEmpty(n)) {
        return n.reduce((a, b) => a + b, 0);
    }
    else {
        return 0;
    }
}
export async function fetchData(assetsPath) {
    const data = await fetch(`/assets/${assetsPath}`);
    const str = await data.text();
    return JSON.parse(str);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBUSxNQUFNLEVBQUUsS0FBSyxFQUFTLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXpFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVoRCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFNLEVBQUUsRUFBRTtJQUM1QixJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsU0FBUyxpQkFBaUIsQ0FBQyxDQUFTO0lBQ2xDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUM1QyxLQUFLLEdBQUcsQ0FBQztTQUNOLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDVixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDWixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQztJQUNILENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNkLE1BQU0sRUFBRSxHQUFlO1FBQ3JCLElBQUksRUFBRSxHQUFXO1FBQ2pCLEtBQUssRUFBRSxLQUFLO1FBQ1osR0FBRyxFQUFFLHFCQUFxQixLQUFLLE1B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LEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJyZXMsIGVsUHJvcCwgZWxUYWcsIElucHV0LCB2ZXJiIH0gZnJvbSBcIi4uL21vZGVsL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgQmFzZVJlc1F0eSwgVXNlciB9IGZyb20gXCIuLi9tb2RlbC90eXBlcy5qc1wiO1xuaW1wb3J0IHsgdXBkYXRlUmVzb3VyY2VCb3ggfSBmcm9tIFwiLi9vdXRwdXQuanNcIjtcblxuZXhwb3J0IGNvbnN0IGxvZyA9ICh4OiBhbnkpID0+IHtcbiAgaWYgKHZlcmIpIHtcbiAgICBjb25zb2xlLmxvZyh4KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVBRktSZXNPYmooeDogc3RyaW5nKSB7XG4gIGNvbnN0IGdpZCA9IHgudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csIFwiLVwiKSxcbiAgICBzaG9ydCA9IHhcbiAgICAgIC5zcGxpdChcIiBcIilcbiAgICAgIC5tYXAoKHYsIGkpID0+IHtcbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHYuY2hhckF0KDApLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHYudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMCwgNCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuam9pbihcIlwiKTtcbiAgY29uc3QgYnI6IEJhc2VSZXNRdHkgPSB7XG4gICAgdHlwZTogZ2lkIGFzIGJyZXMsXG4gICAgbGFiZWw6IHNob3J0LFxuICAgIGltZzogYC4uL2Fzc2V0cy9pY29ucy9zLyR7c2hvcnR9LnBuZ2AsXG4gICAgYW1vdW50OiAwLFxuICB9O1xuICByZXR1cm4gYnI7XG59XG5cbmZ1bmN0aW9uIHdlZWtMYWJlbHMobjogbnVtYmVyLCBzdG9wczogeyBuOiBudW1iZXI7IGRlc2M6IHN0cmluZyB9W10pIHtcbiAgbGV0IGh0bWw6IHN0cmluZyA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IG47IGkrKykge1xuICAgIGlmIChzdG9wcy5zb21lKCh2KSA9PiB2Lm4gPT09IGkpKSB7XG4gICAgICBodG1sICs9IGA8b3B0aW9uIHZhbHVlPVwiJHtpLnRvU3RyaW5nKCl9XCIgbGFiZWw9XCIke1xuICAgICAgICBzdG9wcy5maW5kKCh2KSA9PiB2Lm4gPT09IGkpPy5kZXNjXG4gICAgICB9XCI+PC9vcHRpb24+YDtcbiAgICB9IGVsc2Uge1xuICAgICAgaHRtbCArPSBgPG9wdGlvbiB2YWx1ZT1cIiR7aS50b1N0cmluZygpfVwiIGxhYmVsPVwiXCI+PC9vcHRpb24+YDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGh0bWw7XG59XG5cbmZ1bmN0aW9uIHJhbmdlU2xpZGUodmFsdWU6IHN0cmluZywgdXNlcjogVXNlcikge1xuICAkKFwicmFuZ2VWYWx1ZVwiKS5odG1sKHZhbHVlICsgXCIgd2Vla3NcIik7XG4gICQodGhpcykuYXR0cihcInZhbHVlXCIsIHZhbHVlPy50b1N0cmluZygpKTtcbiAgcG9wdWxhdGVTdG9yYWdlKFwicmFuZ2VWYWx1ZVwiLCB2YWx1ZSk7XG4gIHVwZGF0ZVJlc291cmNlQm94KHVzZXIuaW5jb21lLCBwYXJzZUludCh2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RMaXN0KG5hbWU6IHN0cmluZywgb3B0aW9uczogc3RyaW5nW10gfCBudW1iZXJbXSkge1xuICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgbGlzdC5pZCA9IG5hbWU7XG4gIGZvciAoY29uc3Qgb3B0IG9mIG9wdGlvbnMpIHtcbiAgICBsaXN0LmFwcGVuZENoaWxkKFxuICAgICAgbmV3RWwoXCJvcHRpb25cIiwgeyB2YWx1ZTogb3B0LnRvU3RyaW5nKCkgfSwgb3B0LnRvU3RyaW5nKCkpXG4gICAgKTtcbiAgfVxuICBjb25zdCBsb2NhbFZhbCA9IHN0b3JlZFZhbHVlKG5hbWUpO1xuICBpZiAobG9jYWxWYWwgJiYgb3B0aW9ucy5maW5kSW5kZXgoKHgpID0+IHggPT09IGxvY2FsVmFsKSAhPT0gLTEpIHtcbiAgICBsaXN0Lm9wdGlvbnMuaXRlbShvcHRpb25zLmZpbmRJbmRleCgoeCkgPT4geCA9PT0gbG9jYWxWYWwpKS5zZWxlY3RlZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgbGlzdC5vcHRpb25zLml0ZW0oMCkuc2V0QXR0cmlidXRlKFwic2VsZWN0ZWRcIiwgXCJcIik7XG4gIH1cbiAgcmV0dXJuIGxpc3Q7XG59XG5cbmV4cG9ydCB7XG4gIGNyZWF0ZVNlbGVjdExpc3QsXG4gIGdlbmVyYXRlQUZLUmVzT2JqLFxuICBoYXNFbXB0eSxcbiAgcG9wdWxhdGVTdG9yYWdlLFxuICByYW5nZVNsaWRlLFxuICBzYXZlZE9iaixcbiAgc2V0QXBwLFxuICB3ZWVrTGFiZWxzLFxuICBidXR0b25XcmFwSW5wdXQsXG59O1xuXG4vLyEgLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8hIEhUTUwgR2VuZXJhdG9ycyAvL1xuLy8hIC8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdJbihmaWVsZFR5cGU6IElucHV0LCBhdHRycz86IHsgW2s6IHN0cmluZ106IHN0cmluZyB9KSB7XG4gIGF0dHJzW1widHlwZVwiXSA9IGZpZWxkVHlwZTtcbiAgcmV0dXJuIG5ld0VsKFwiaW5wdXRcIiwgeyAuLi5hdHRycyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0VsKFxuICB0YWc6IHN0cmluZyxcbiAgcHJvcHM/OiB7IFtrOiBzdHJpbmddOiBzdHJpbmcgfSxcbiAgaW5uZXI/OiBzdHJpbmdcbikge1xuICBjb25zdCBkb2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmIChwcm9wcykge1xuICAgIE9iamVjdC5lbnRyaWVzKHByb3BzKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICBpZiAoa1sxXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgZG9jLnNldEF0dHJpYnV0ZShrWzBdLCBrWzFdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoaW5uZXIpIHtcbiAgICBkb2MuaW5uZXJIVE1MID0gaW5uZXI7XG4gIH1cbiAgcmV0dXJuIGRvYztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0J0bih0ZXh0Pzogc3RyaW5nLCBjPzogc3RyaW5nLCBpZD86IHN0cmluZykge1xuICBsZXQgYXR0cnM6IHsgW3g6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gIGF0dHJzW2VsUHJvcC5UeXBlXSA9IFwiYnV0dG9uXCI7XG4gIGlmIChjKSB7XG4gICAgYXR0cnNbZWxQcm9wLkNsYXNzXSA9IGM7XG4gIH1cbiAgaWYgKGlkKSB7XG4gICAgYXR0cnNbZWxQcm9wLklkXSA9IGlkO1xuICB9XG4gIHJldHVybiBuZXdFbChlbFRhZy5CdXR0b24sIGF0dHJzLCB0ZXh0KTtcbn1cbmZ1bmN0aW9uIGJ1dHRvbldyYXBJbnB1dChlbDogSFRNTEVsZW1lbnQsIHVwZGF0ZTogKHk6IG51bWJlcikgPT4gdm9pZCkge1xuICBsZXQgaW5wdXQgPSBlbCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICBjb25zdCB3cmFwID0gbmV3RWwoXCJkaXZcIiwgeyBjbGFzczogXCJudW1iZXItaW5wdXRcIiB9KSxcbiAgICAvLyBpbmNCdG4gPSBuZXdCdG4oXCLil4DvuI9cIiwgYGRlc2MgJHtlbC5jbGFzc05hbWV9YCksXG4gICAgaW5jQnRuID0gbmV3QnRuKFwiPFwiLCBgZGVzYyAke2VsLmNsYXNzTmFtZX1gKSxcbiAgICAvLyBkZXNjQnRuID0gbmV3QnRuKFwi4pa277iPXCIsIGBpbmMgJHtlbC5jbGFzc05hbWV9YCk7XG4gICAgZGVzY0J0biA9IG5ld0J0bihcIj5cIiwgYGluYyAke2VsLmNsYXNzTmFtZX1gKTtcblxuICB3cmFwLmFwcGVuZENoaWxkKGluY0J0bik7XG4gIHdyYXAuYXBwZW5kQ2hpbGQoZWwpO1xuICB3cmFwLmFwcGVuZENoaWxkKGRlc2NCdG4pO1xuICB3cmFwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudCkge1xuICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTmFtZS5pbmNsdWRlcyhcImRlc2NcIikgJiYgaW5wdXQudmFsdWVBc051bWJlciA+PSAwKSB7XG4gICAgICAgIGlucHV0LnN0ZXBEb3duKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnB1dC5zdGVwVXAoKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZShpbnB1dC52YWx1ZUFzTnVtYmVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgdXBkYXRlKGlucHV0LnZhbHVlQXNOdW1iZXIpO1xuICB9KTtcbiAgcmV0dXJuIHdyYXA7XG59XG5cbi8vISAvLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyEgLy8vIGxvY2FsIGRhdGEgLy8vXG4vLyEgLy8vLy8vLy8vLy8vLy8vLy9cbmV4cG9ydCBmdW5jdGlvbiBzdG9yZWRWYWx1ZShpbnB1dElkOiBzdHJpbmcsIHZhbHVlPzogYW55KTogYm9vbGVhbiB8IHN0cmluZyB7XG4gIGlmICh2YWx1ZSA+PSAwIHx8IHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGlucHV0SWQsIHN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5sb2coYHNhdmUgZXJyb3IgJHtlfWApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCB2ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oaW5wdXRJZCk7XG4gIHJldHVybiB2ID8gdiA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzYXZlZE9iajxUeXBlPihzdHI6IHN0cmluZywgZGVmOiBUeXBlKSB7XG4gIGlmIChzdG9yZWRWYWx1ZShzdHIpKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmLCBKU09OLnBhcnNlKHN0b3JlZFZhbHVlKHN0cikudG9TdHJpbmcoKSkpO1xuICB9XG4gIHJldHVybiBkZWY7XG59XG5cbmZ1bmN0aW9uIHNldEFwcChrZXk6IHN0cmluZykge1xuICBjb25zdCBzdG9yZWRWYWwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAkKGAjJHtrZXl9IG9wdGlvblt2YWx1ZT1cIiR7c3RvcmVkVmFsfVwiXWApLmZpcnN0KCkuYXR0cihcInNlbGVjdGVkXCIsIFwiXCIpO1xufVxuXG5mdW5jdGlvbiBwb3B1bGF0ZVN0b3JhZ2Uoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgaWYgKGtleSAmJiB2YWx1ZSkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgIHNldEFwcChrZXkpO1xuICB9XG59XG5cbi8vISAvLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyEgLy8gdXRpbGl0eSBmdW5jIC8vXG4vLyEgLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gaGFzRW1wdHkob2JqOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDAgJiZcbiAgICBPYmplY3QudmFsdWVzKG9iaikuc29tZSgoeCkgPT4geCA9PT0gbnVsbCB8fCB4ID09PSAwIHx8IHggPT09IHVuZGVmaW5lZClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVTdW0objogbnVtYmVyW10pIHtcbiAgaWYgKG4ubGVuZ3RoID4gMCAmJiAhaGFzRW1wdHkobikpIHtcbiAgICByZXR1cm4gbi5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hEYXRhKGFzc2V0c1BhdGg6IHN0cmluZykge1xuICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2goYC9hc3NldHMvJHthc3NldHNQYXRofWApO1xuICBjb25zdCBzdHIgPSBhd2FpdCBkYXRhLnRleHQoKTtcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbn1cbiJdfQ==