import { verb } from "../model/constants.js";
import { updateResourceBox } from "./output.js";
var elTag;
(function (elTag) {
    elTag["Input"] = "input";
    elTag["Div"] = "div";
    elTag["Span"] = "span";
    elTag["Label"] = "label";
    elTag["Select"] = "select";
    elTag["Option"] = "option";
    elTag["Form"] = "form";
    elTag["Img"] = "img";
})(elTag || (elTag = {}));
var elProp;
(function (elProp) {
    elProp["Id"] = "id";
    elProp["Class"] = "class";
    elProp["For"] = "for";
    elProp["Alt"] = "alt";
    elProp["Src"] = "src";
    elProp["Width"] = "width";
    elProp["Style"] = "style";
    elProp["Type"] = "type";
})(elProp || (elProp = {}));
var Input;
(function (Input) {
    Input["Number"] = "number";
    Input["Text"] = "text";
    Input["CheckBox"] = "checkbox";
    Input["Datetime"] = "datetime-local";
})(Input || (Input = {}));
export const log = (x) => {
    if (verb) {
        console.log(x);
    }
};
function generateAFKResObj(x) {
    const gid = x.toLowerCase().replace(/ /g, "-"), short = x
        .split(" ")
        .map((v, i) => {
        if (i > 0) {
            return v.charAt(0).toLowerCase();
        }
        else {
            return v.toLowerCase().substring(0, 4);
        }
    })
        .join("");
    const br = {
        type: gid,
        label: short,
        img: `../assets/icons/s/${short}.png`,
        amount: 0,
    };
    return br;
}
function setApp(key) {
    const storedVal = localStorage.getItem(key);
    $(`#${key} option[value="${storedVal}"]`).first().attr("selected", "");
}
function populateStorage(key, value) {
    if (key && value) {
        localStorage.setItem(key, value);
        setApp(key);
    }
}
function weekLabels(n, stops) {
    let html = "";
    for (let i = 1; i <= n; i++) {
        if (stops.some((v) => v.n === i)) {
            html += `<option value="${i.toString()}" label="${stops.find((v) => v.n === i)?.desc}"></option>`;
        }
        else {
            html += `<option value="${i.toString()}" label=""></option>`;
        }
    }
    return html;
}
function rangeSlide(value, user) {
    $("rangeValue").html(value + " weeks");
    $(this).attr("value", value?.toString());
    populateStorage("rangeValue", value);
    updateResourceBox(user.income, parseInt(value));
}
function createSelectList(name, options) {
    const list = document.createElement("select");
    list.id = name;
    for (const opt of options) {
        list.appendChild(newEl("option", { value: opt.toString() }, opt.toString()));
    }
    const localVal = storedValue(name);
    if (localVal && options.findIndex((x) => x === localVal) !== -1) {
        list.options.item(options.findIndex((x) => x === localVal)).selected = true;
    }
    else {
        list.options.item(0).setAttribute("selected", "");
    }
    return list;
}
function createInput(fieldType, attrs) {
    attrs["type"] = fieldType;
    return newEl("input", { ...attrs });
}
function savedObj(str, def) {
    if (storedValue(str)) {
        return Object.assign(def, JSON.parse(storedValue(str).toString()));
    }
    return def;
}
export { newEl, newBtn, createInput, createSelectList, generateAFKResObj, hasEmpty as isEmpty, populateStorage, rangeSlide, savedObj, setApp, storedValue, weekLabels, fetchData, buttonWrapInput, elTag, Input, elProp, };
function newEl(tag, props, inner) {
    const doc = document.createElement(tag);
    if (props) {
        Object.entries(props).forEach((k) => {
            doc.setAttribute(k[0], k[1]);
        });
    }
    if (inner) {
        doc.innerHTML = inner;
    }
    return doc;
}
function newBtn(text, c, id) {
    if (!text) {
        text = id;
    }
    return newEl("button", {
        type: "button",
        class: `md-button ${c}`,
    }, text);
}
function storedValue(inputId, value) {
    if (value >= 0 || value) {
        try {
            const str = JSON.stringify(value);
            localStorage.setItem(inputId, str);
        }
        catch (e) {
            console.log(`save error ${e}`);
            return false;
        }
        return true;
    }
    const v = localStorage.getItem(inputId);
    return v ? v : false;
}
function hasEmpty(obj) {
    return (Object.keys(obj).length === 0 &&
        Object.values(obj).some((x) => x === null || x === 0 || x === undefined));
}
export function safeSum(n) {
    if (!hasEmpty(n)) {
        return n.reduce((a, b) => a + b);
    }
}
async function fetchData(assetsPath) {
    const data = await fetch(`/assets/${assetsPath}`);
    const str = await data.text();
    return JSON.parse(str);
}
function buttonWrapInput(el, update) {
    let input = el;
    const wrap = newEl("div", { class: "number-container" }), incBtn = newBtn("<", `desc ${el.className}`), descBtn = newBtn(">", `inc ${el.className}`);
    wrap.appendChild(incBtn);
    wrap.appendChild(el);
    wrap.appendChild(descBtn);
    wrap.addEventListener("click", (e) => {
        if (e.target instanceof HTMLButtonElement) {
            if (e.target.className.includes("desc") && input.valueAsNumber >= 0) {
                input.stepDown();
            }
            else {
                input.stepUp();
            }
            update(input.valueAsNumber);
        }
    });
    input.addEventListener("input", () => {
        update(input.valueAsNumber);
    });
    return wrap;
}
//# sourceMappingURL=data:application/json;base64,