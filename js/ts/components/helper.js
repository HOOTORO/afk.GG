import { elProp, elTag, verb } from "../model/constants.js";
export const log = (x) => {
    if (verb) {
        console.log(x);
    }
};
export function newIn(fieldType, attrs) {
    attrs["type"] = fieldType;
    return newEl("input", { ...attrs });
}
export function newEl(tag, props, inner) {
    const doc = document.createElement(tag);
    if (props) {
        Object.entries(props).forEach((k) => {
            if (k[1] != undefined) {
                doc.setAttribute(k[0], k[1]);
            }
        });
    }
    if (inner) {
        doc.innerHTML = inner;
    }
    return doc;
}
export function newBtn(text, c, id) {
    let attrs = {};
    attrs[elProp.Type] = "button";
    if (c) {
        attrs[elProp.Class] = c;
    }
    if (id) {
        attrs[elProp.Id] = id;
    }
    return newEl(elTag.Button, attrs, text);
}
export function buttonWrapInput(el, update) {
    let input = el;
    const wrap = newEl("div", { class: "number-input" }), incBtn = newBtn("<", `desc ${el.className}`), descBtn = newBtn(">", `inc ${el.className}`);
    wrap.appendChild(incBtn);
    wrap.appendChild(el);
    wrap.appendChild(descBtn);
    wrap.addEventListener("click", (e) => {
        e.preventDefault();
        if (e.target instanceof HTMLButtonElement) {
            if (e.target.className.includes("desc")) {
                if (input.valueAsNumber > 0) {
                    input.stepDown();
                }
            }
            else {
                input.stepUp();
            }
            update(input.valueAsNumber);
        }
    });
    return wrap;
}
export function storedValue(inputId, value) {
    if (value >= 0 || value) {
        try {
            const str = JSON.stringify(value);
            localStorage.setItem(inputId, str);
        }
        catch (e) {
            console.log(`save error ${e}`);
            return false;
        }
        return true;
    }
    const v = localStorage.getItem(inputId);
    return v ? v : false;
}
export function savedObj(str, def) {
    if (storedValue(str)) {
        return Object.assign(def, JSON.parse(storedValue(str).toString()));
    }
    return def;
}
export async function fetchData(assetsPath) {
    const data = await fetch(`/assets/${assetsPath}`);
    const str = await data.text();
    return JSON.parse(str);
}
export function safeSum(n) {
    if (n.length > 0 && !hasEmpty(n)) {
        return n.reduce((a, b) => a + b, 0);
    }
    else {
        return 0;
    }
}
function hasEmpty(obj) {
    return (Object.keys(obj).length === 0 &&
        Object.values(obj).some((x) => x === null || x === 0 || x === undefined));
}
//# sourceMappingURL=data:application/json;base64,