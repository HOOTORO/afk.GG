import { url } from "../model/constants.js";
async function fetchTableData(tableName) {
    const response = await fetch(url(tableName));
    const text = await response.text();
    const json = JSON.parse(text.substring(47).slice(0, -2));
    let x = {
        cols: json.table.cols,
        rows: json.table.rows,
    };
    return x;
}
function headers(t) {
    return t.cols.map((x) => {
        return { id: CharIdToNumber(x.id), label: x.label };
    });
}
function columnData(n, t) {
    return t.rows.map((x) => x.c[n].v);
}
function CharIdToNumber(n) {
    const input = n.toUpperCase().charCodeAt(0), ACode = 65, ZCode = 90;
    if (input < ACode || input > ZCode) {
        throw new Error("Bad Character");
    }
    return input - ACode + 1;
}
function tableObjects(table) {
    return table.rows.map((el) => {
        return headers(table).map((h) => {
            return { obj: h.label, value: el.c[h.id].v };
        });
    });
}
export { columnData, fetchTableData, tableObjects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3NoZWV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2dzaGVldHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzVDLEtBQUssVUFBVSxjQUFjLENBQUMsU0FBaUI7SUFDN0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFbkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELElBQUksQ0FBQyxHQUFXO1FBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSTtRQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO0tBQ3RCLENBQUM7SUFDRixPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxDQUFTO0lBQ3hCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUN0QixPQUFPLEVBQUUsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxDQUFTLEVBQUUsQ0FBUztJQUN0QyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxDQUFTO0lBQy9CLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQ3pDLEtBQUssR0FBRyxFQUFFLEVBQ1YsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUViLElBQUksS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsT0FBTyxLQUFLLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsS0FBYTtJQUNqQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7UUFDM0IsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXJsIH0gZnJvbSBcIi4uL21vZGVsL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgR3NoZWV0IH0gZnJvbSBcIi4uL21vZGVsL3R5cGVzLmpzXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoVGFibGVEYXRhKHRhYmxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxHc2hlZXQ+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwodGFibGVOYW1lKSk7XG4gIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gIC8vUmVtb3ZlIGFkZGl0aW9uYWwgdGV4dCBhbmQgZXh0cmFjdCBvbmx5IEpTT046XG4gIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHRleHQuc3Vic3RyaW5nKDQ3KS5zbGljZSgwLCAtMikpO1xuICBsZXQgeDogR3NoZWV0ID0ge1xuICAgIGNvbHM6IGpzb24udGFibGUuY29scyxcbiAgICByb3dzOiBqc29uLnRhYmxlLnJvd3MsXG4gIH07XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBoZWFkZXJzKHQ6IEdzaGVldCkge1xuICByZXR1cm4gdC5jb2xzLm1hcCgoeCkgPT4ge1xuICAgIHJldHVybiB7IGlkOiBDaGFySWRUb051bWJlcih4LmlkKSwgbGFiZWw6IHgubGFiZWwgfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbHVtbkRhdGEobjogbnVtYmVyLCB0OiBHc2hlZXQpIHtcbiAgcmV0dXJuIHQucm93cy5tYXAoKHgpID0+IHguY1tuXS52KTtcbn1cblxuZnVuY3Rpb24gQ2hhcklkVG9OdW1iZXIobjogc3RyaW5nKSB7XG4gIGNvbnN0IGlucHV0ID0gbi50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCksXG4gICAgQUNvZGUgPSA2NSxcbiAgICBaQ29kZSA9IDkwO1xuXG4gIGlmIChpbnB1dCA8IEFDb2RlIHx8IGlucHV0ID4gWkNvZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgQ2hhcmFjdGVyXCIpO1xuICB9XG4gIHJldHVybiBpbnB1dCAtIEFDb2RlICsgMTtcbn1cblxuZnVuY3Rpb24gdGFibGVPYmplY3RzKHRhYmxlOiBHc2hlZXQpIHtcbiAgcmV0dXJuIHRhYmxlLnJvd3MubWFwKChlbCkgPT4ge1xuICAgIHJldHVybiBoZWFkZXJzKHRhYmxlKS5tYXAoKGgpID0+IHtcbiAgICAgIHJldHVybiB7IG9iajogaC5sYWJlbCwgdmFsdWU6IGVsLmNbaC5pZF0udiB9O1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgY29sdW1uRGF0YSwgZmV0Y2hUYWJsZURhdGEsIHRhYmxlT2JqZWN0cyB9O1xuIl19