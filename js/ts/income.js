import { loadRewards, modeRewards, rewards } from "./components/dataloader.js";
import { columnData } from "./components/gsheets.js";
import { newEl, createSelectList, populateStorage, rangeSlide, } from "./components/helper.js";
import { makeOut, updateResourceBox } from "./components/output.js";
import { user } from "./main.js";
import { ValueModes } from "./model/constants.js";
export const app = document.getElementById("app");
export function runRankedIncome() {
    app.appendChild(makeOut());
    drawInputs().catch((x) => console.log(`Promise rejected => ${x}`));
}
async function drawInputs() {
    let inputForm = newEl("form", { id: "a-form" });
    modeRewards().forEach((x) => {
        const mode = ValueModes.emuns().find((s) => s.table === x.mode);
        x.table
            .then((t) => {
            const container = newEl("div", {
                class: "select-container",
            }), label = document.createElement("h4"), s = createSelectList(mode.id, columnData(0, t));
            label.innerText = mode.id;
            container.appendChild(s);
            container.insertBefore(label, s);
            inputForm.append(container);
            loadRewards(x.mode, t);
        })
            .then(() => app.appendChild(inputForm))
            .catch((x) => console.log(`Promise rejected${x.status}`))
            .finally(() => {
            setTimeout(() => {
                app.dispatchEvent(new InputEvent("change"));
            }, 2000);
        });
    });
    app.addEventListener("change", (x) => {
        const tg = x.target;
        user.loadLocal();
        if (tg.value && tg.type === "select-one") {
            const reward = rewards.find((g) => g.mode === ValueModes.gMode(tg.id) && g.rank === tg.value);
            populateStorage(tg.id, tg.value);
            user.reward = reward;
            user.calc();
        }
        if (tg instanceof HTMLInputElement && tg.type === "select-one") {
            rangeSlide(tg.value, user);
        }
        else if (user) {
            const weeks = parseInt(localStorage.getItem("rangeValue"));
            if (weeks > 0) {
                updateResourceBox(user.income, weeks);
            }
            else {
                updateResourceBox(user.income);
            }
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5jb21lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2luY29tZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMvRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckQsT0FBTyxFQUNMLEtBQUssRUFDTCxnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLFVBQVUsR0FDWCxNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdsRCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUVsRCxNQUFNLFVBQVUsZUFBZTtJQUM3QixHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDM0IsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUVELEtBQUssVUFBVSxVQUFVO0lBQ3ZCLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVoRCxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUMxQixNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsS0FBSzthQUNKLElBQUksQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFO1lBQ2xCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUU7Z0JBQzNCLEtBQUssRUFBRSxrQkFBa0I7YUFDMUIsQ0FBQyxFQUNGLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUNwQyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFbEQsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzFCLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsU0FBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDakMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1QixXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUN0QyxLQUFLLENBQUMsQ0FBQyxDQUF3QixFQUFFLEVBQUUsQ0FDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQzNDO2FBQ0EsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUNaLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzlDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBYSxFQUFFLEVBQUU7UUFDL0MsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQTJCLENBQUM7UUFDekMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLElBQUksRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRSxDQUFDO1lBQ3pDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQ3pCLENBQUMsQ0FBYSxFQUFFLEVBQUUsQ0FDaEIsQ0FBQyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQzVELENBQUM7WUFDRixlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDckIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUNELElBQUksRUFBRSxZQUFZLGdCQUFnQixJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFLENBQUM7WUFDL0QsVUFBVSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQzthQUFNLElBQUksSUFBSSxFQUFFLENBQUM7WUFDaEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUMzRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDZCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3hDLENBQUM7aUJBQU0sQ0FBQztnQkFDTixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2FkUmV3YXJkcywgbW9kZVJld2FyZHMsIHJld2FyZHMgfSBmcm9tIFwiLi9jb21wb25lbnRzL2RhdGFsb2FkZXIuanNcIjtcbmltcG9ydCB7IGNvbHVtbkRhdGEgfSBmcm9tIFwiLi9jb21wb25lbnRzL2dzaGVldHMuanNcIjtcbmltcG9ydCB7XG4gIG5ld0VsLFxuICBjcmVhdGVTZWxlY3RMaXN0LFxuICBwb3B1bGF0ZVN0b3JhZ2UsXG4gIHJhbmdlU2xpZGUsXG59IGZyb20gXCIuL2NvbXBvbmVudHMvaGVscGVyLmpzXCI7XG5pbXBvcnQgeyBtYWtlT3V0LCB1cGRhdGVSZXNvdXJjZUJveCB9IGZyb20gXCIuL2NvbXBvbmVudHMvb3V0cHV0LmpzXCI7XG5pbXBvcnQgeyB1c2VyIH0gZnJvbSBcIi4vbWFpbi5qc1wiO1xuaW1wb3J0IHsgVmFsdWVNb2RlcyB9IGZyb20gXCIuL21vZGVsL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgR3NoZWV0LCBSYW5rUmV3YXJkIH0gZnJvbSBcIi4vbW9kZWwvdHlwZXMuanNcIjtcblxuZXhwb3J0IGNvbnN0IGFwcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuUmFua2VkSW5jb21lKCkge1xuICBhcHAuYXBwZW5kQ2hpbGQobWFrZU91dCgpKTtcbiAgZHJhd0lucHV0cygpLmNhdGNoKCh4KSA9PiBjb25zb2xlLmxvZyhgUHJvbWlzZSByZWplY3RlZCA9PiAke3h9YCkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkcmF3SW5wdXRzKCkge1xuICBsZXQgaW5wdXRGb3JtID0gbmV3RWwoXCJmb3JtXCIsIHsgaWQ6IFwiYS1mb3JtXCIgfSk7XG5cbiAgbW9kZVJld2FyZHMoKS5mb3JFYWNoKCh4KSA9PiB7XG4gICAgY29uc3QgbW9kZSA9IFZhbHVlTW9kZXMuZW11bnMoKS5maW5kKChzKSA9PiBzLnRhYmxlID09PSB4Lm1vZGUpO1xuICAgIHgudGFibGVcbiAgICAgIC50aGVuKCh0OiBHc2hlZXQpID0+IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbmV3RWwoXCJkaXZcIiwge1xuICAgICAgICAgICAgY2xhc3M6IFwic2VsZWN0LWNvbnRhaW5lclwiLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImg0XCIpLFxuICAgICAgICAgIHMgPSBjcmVhdGVTZWxlY3RMaXN0KG1vZGUuaWQsIGNvbHVtbkRhdGEoMCwgdCkpO1xuXG4gICAgICAgIGxhYmVsLmlubmVyVGV4dCA9IG1vZGUuaWQ7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShsYWJlbCwgcyk7XG4gICAgICAgIGlucHV0Rm9ybS5hcHBlbmQoY29udGFpbmVyKTtcbiAgICAgICAgbG9hZFJld2FyZHMoeC5tb2RlLCB0KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiBhcHAuYXBwZW5kQ2hpbGQoaW5wdXRGb3JtKSlcbiAgICAgIC5jYXRjaCgoeDogUHJvbWlzZVJlamVjdGVkUmVzdWx0KSA9PlxuICAgICAgICBjb25zb2xlLmxvZyhgUHJvbWlzZSByZWplY3RlZCR7eC5zdGF0dXN9YClcbiAgICAgIClcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgYXBwLmRpc3BhdGNoRXZlbnQobmV3IElucHV0RXZlbnQoXCJjaGFuZ2VcIikpO1xuICAgICAgICB9LCAyMDAwKTtcbiAgICAgIH0pO1xuICB9KTtcbiAgYXBwLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKHg6IElucHV0RXZlbnQpID0+IHtcbiAgICBjb25zdCB0ZyA9IHgudGFyZ2V0IGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuICAgIHVzZXIubG9hZExvY2FsKCk7XG4gICAgaWYgKHRnLnZhbHVlICYmIHRnLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiKSB7XG4gICAgICBjb25zdCByZXdhcmQgPSByZXdhcmRzLmZpbmQoXG4gICAgICAgIChnOiBSYW5rUmV3YXJkKSA9PlxuICAgICAgICAgIGcubW9kZSA9PT0gVmFsdWVNb2Rlcy5nTW9kZSh0Zy5pZCkgJiYgZy5yYW5rID09PSB0Zy52YWx1ZVxuICAgICAgKTtcbiAgICAgIHBvcHVsYXRlU3RvcmFnZSh0Zy5pZCwgdGcudmFsdWUpO1xuICAgICAgdXNlci5yZXdhcmQgPSByZXdhcmQ7XG4gICAgICB1c2VyLmNhbGMoKTtcbiAgICB9XG4gICAgaWYgKHRnIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJiB0Zy50eXBlID09PSBcInNlbGVjdC1vbmVcIikge1xuICAgICAgcmFuZ2VTbGlkZSh0Zy52YWx1ZSwgdXNlcik7XG4gICAgfSBlbHNlIGlmICh1c2VyKSB7XG4gICAgICBjb25zdCB3ZWVrcyA9IHBhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwicmFuZ2VWYWx1ZVwiKSk7XG4gICAgICBpZiAod2Vla3MgPiAwKSB7XG4gICAgICAgIHVwZGF0ZVJlc291cmNlQm94KHVzZXIuaW5jb21lLCB3ZWVrcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVSZXNvdXJjZUJveCh1c2VyLmluY29tZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==