import { updateTableData } from "../abex/relicEstimate.js";
import { elTag, Input, newEl, storedValue, } from "../components/helper.js";
import { Iconized } from "./iconized.js";
export default class Relic extends Iconized {
    cost;
    recipe;
    amount = 0;
    reserve = 0;
    constructor(icon, name, id, cost, recipe) {
        super(id, icon, name);
        this.cost = cost;
        this.recipe = recipe;
        const fnu = (y) => {
            if (y >= 0) {
                this.amount = y;
                storedValue(this.name, this.amount);
            }
        };
        const fni = () => {
            return storedValue(`rel${this.id}`).toString();
        };
        this.amount = parseInt(fni());
    }
    Tier() {
        return Math.floor((this.id - 1) / 18) + 1;
    }
    html() {
        let img = super.html();
        const span = newEl(elTag.Span, { class: `item-${this.id}` });
        img.setAttribute("width", "52");
        img.setAttribute("height", "52");
        span.appendChild(img);
        return span;
    }
    HTMLInput() {
        const stored = storedValue(`rel${this.id}`)
            ? parseInt(storedValue(`rel${this.id}`).toString())
            : 0;
        this.amount = stored;
        const img = super.html(), container = newEl(elTag.Span, { class: `inventory relic` }), props = {
            type: Input.Number,
            class: `user-bag-item-${this.id}`,
            name: this.name,
            min: "0",
            value: stored.toString(),
        }, input = newEl(elTag.Input, props);
        img.setAttribute("width", "52");
        img.setAttribute("height", "52");
        input.addEventListener("change", (e) => {
            if (e.target instanceof HTMLInputElement) {
                this.amount = e.target.valueAsNumber;
                e.target.setAttribute("value", this.amount.toString());
                storedValue(`rel${this.id}`, this.amount);
                updateTableData();
            }
        });
        container.appendChild(img);
        container.appendChild(input);
        return container;
    }
}
export class CoreRelic extends Relic {
    position;
    goal;
    virtue;
    constructor(icon, name, id, cost, rec, pos, v, goal) {
        super(icon, name, id, cost, rec);
        this.position = pos;
        this.goal = goal;
        this.virtue = v;
    }
    GoalTier() {
        return this.goal.Tier();
    }
    html() {
        let r = super.html();
        let tg = "relic";
        r.classList.add(`idx-${this.position}`, this.virtue, tg);
        return r;
    }
    HTMLGoal() {
        let r = this.goal.html();
        let tg = "goal";
        r.classList.add(`idx-${this.position}`, this.virtue, tg);
        return r;
    }
    update() {
        const relSpan = `.idx-${this.position}.${this.virtue}`;
        document.querySelectorAll(relSpan).forEach((v) => {
            if (v.classList.contains("goal")) {
                v.replaceWith(this.HTMLGoal());
            }
            else {
                v.replaceWith(this.html());
            }
        });
        storedValue(`${this.virtue}.${this.position}`, this);
        updateTableData();
    }
}
//# sourceMappingURL=data:application/json;base64,