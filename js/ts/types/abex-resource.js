import { updateTableData } from "../abex/relicEstimate.js";
import { buttonWrapInput, elTag, Input, newEl, storedValue, } from "../components/helper.js";
import { Iconized } from "./iconized.js";
export const stam = "https://i.imgur.com/n5WOzSZ.png";
const ess = "https://i.imgur.com/Gw216PZ.png";
const clName = "abex resource";
export class IconizedInput extends Iconized {
    value;
    cssName;
    init;
    update;
    constructor(id, src, name, value, cssName) {
        const fnu = (y) => {
            if (y >= 0) {
                this.value = y;
                storedValue(this.name, this.value);
                updateTableData();
            }
        };
        const fni = () => {
            return storedValue(this.name).toString();
        };
        super(id, src, name);
        this.value = value;
        this.cssName = cssName;
        this.init = fni;
        this.update = fnu;
    }
    html() {
        const img = super.html(), container = newEl(elTag.Div, { class: this.cssName }), props = {
            type: Input.Number,
            class: this.cssName,
            name: this.name,
            value: this.init(),
        }, input = buttonWrapInput(newEl(elTag.Input, props), this.update);
        container.appendChild(img);
        container.appendChild(input);
        return container;
    }
}
export class Stamina extends IconizedInput {
    constructor() {
        super(0, stam, "ex-food", 0, clName);
        this.value = parseInt(this.init());
    }
}
export class Essence extends IconizedInput {
    constructor() {
        super(0, ess, "essence", 0, clName);
        this.value = parseInt(this.init());
    }
    html() {
        const r = super.html();
        r.querySelectorAll("button").forEach((x) => {
            x.remove();
        });
        return r;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJleC1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90eXBlcy9hYmV4LXJlc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQ0wsZUFBZSxFQUNmLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFdBQVcsR0FDWixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLGlDQUFpQyxDQUFDO0FBQ3RELE1BQU0sR0FBRyxHQUFHLGlDQUFpQyxDQUFDO0FBQzlDLE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQztBQUUvQixNQUFNLE9BQU8sYUFBYyxTQUFRLFFBQVE7SUFPaEM7SUFDQTtJQVBGLElBQUksQ0FBZTtJQUNuQixNQUFNLENBQXNCO0lBQ25DLFlBQ0UsRUFBVSxFQUNWLEdBQVcsRUFDWCxJQUFZLEVBQ0wsS0FBYSxFQUNiLE9BQWU7UUFFdEIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRTtZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDZixXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25DLGVBQWUsRUFBRSxDQUFDO1lBQ3BCLENBQUM7UUFDSCxDQUFDLENBQUM7UUFDRixNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUU7WUFDZixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0MsQ0FBQyxDQUFDO1FBRUYsS0FBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFkZCxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQWV0QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFDdEIsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUNyRCxLQUFLLEdBQUc7WUFDTixJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ25CLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO1NBQ25CLEVBQ0QsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQUNELE1BQU0sT0FBTyxPQUFRLFNBQVEsYUFBYTtJQUN4QztRQUNFLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLE9BQVEsU0FBUSxhQUFhO0lBQ3hDO1FBQ0UsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDekMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVwZGF0ZVRhYmxlRGF0YSB9IGZyb20gXCIuLi9hYmV4L3JlbGljRXN0aW1hdGUuanNcIjtcbmltcG9ydCB7XG4gIGJ1dHRvbldyYXBJbnB1dCxcbiAgZWxUYWcsXG4gIElucHV0LFxuICBuZXdFbCxcbiAgc3RvcmVkVmFsdWUsXG59IGZyb20gXCIuLi9jb21wb25lbnRzL2hlbHBlci5qc1wiO1xuaW1wb3J0IHsgSWNvbml6ZWQgfSBmcm9tIFwiLi9pY29uaXplZC5qc1wiO1xuXG5leHBvcnQgY29uc3Qgc3RhbSA9IFwiaHR0cHM6Ly9pLmltZ3VyLmNvbS9uNVdPelNaLnBuZ1wiO1xuY29uc3QgZXNzID0gXCJodHRwczovL2kuaW1ndXIuY29tL0d3MjE2UFoucG5nXCI7XG5jb25zdCBjbE5hbWUgPSBcImFiZXggcmVzb3VyY2VcIjtcblxuZXhwb3J0IGNsYXNzIEljb25pemVkSW5wdXQgZXh0ZW5kcyBJY29uaXplZCB7XG4gIHB1YmxpYyBpbml0OiAoKSA9PiBzdHJpbmc7XG4gIHB1YmxpYyB1cGRhdGU6ICh4OiBudW1iZXIpID0+IHZvaWQ7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGlkOiBudW1iZXIsXG4gICAgc3JjOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHB1YmxpYyB2YWx1ZTogbnVtYmVyLFxuICAgIHB1YmxpYyBjc3NOYW1lOiBzdHJpbmdcbiAgKSB7XG4gICAgY29uc3QgZm51ID0gKHk6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKHkgPj0gMCkge1xuICAgICAgICB0aGlzLnZhbHVlID0geTtcbiAgICAgICAgc3RvcmVkVmFsdWUodGhpcy5uYW1lLCB0aGlzLnZhbHVlKTtcbiAgICAgICAgdXBkYXRlVGFibGVEYXRhKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBmbmkgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gc3RvcmVkVmFsdWUodGhpcy5uYW1lKS50b1N0cmluZygpO1xuICAgIH07XG5cbiAgICBzdXBlcihpZCwgc3JjLCBuYW1lKTtcblxuICAgIHRoaXMuaW5pdCA9IGZuaTtcbiAgICB0aGlzLnVwZGF0ZSA9IGZudTtcbiAgfVxuXG4gIGh0bWwoKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGltZyA9IHN1cGVyLmh0bWwoKSxcbiAgICAgIGNvbnRhaW5lciA9IG5ld0VsKGVsVGFnLkRpdiwgeyBjbGFzczogdGhpcy5jc3NOYW1lIH0pLFxuICAgICAgcHJvcHMgPSB7XG4gICAgICAgIHR5cGU6IElucHV0Lk51bWJlcixcbiAgICAgICAgY2xhc3M6IHRoaXMuY3NzTmFtZSxcbiAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICB2YWx1ZTogdGhpcy5pbml0KCksXG4gICAgICB9LFxuICAgICAgaW5wdXQgPSBidXR0b25XcmFwSW5wdXQobmV3RWwoZWxUYWcuSW5wdXQsIHByb3BzKSwgdGhpcy51cGRhdGUpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbWcpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFN0YW1pbmEgZXh0ZW5kcyBJY29uaXplZElucHV0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoMCwgc3RhbSwgXCJleC1mb29kXCIsIDAsIGNsTmFtZSk7XG4gICAgdGhpcy52YWx1ZSA9IHBhcnNlSW50KHRoaXMuaW5pdCgpKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXNzZW5jZSBleHRlbmRzIEljb25pemVkSW5wdXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigwLCBlc3MsIFwiZXNzZW5jZVwiLCAwLCBjbE5hbWUpO1xuICAgIHRoaXMudmFsdWUgPSBwYXJzZUludCh0aGlzLmluaXQoKSk7XG4gIH1cblxuICBodG1sKCk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCByID0gc3VwZXIuaHRtbCgpO1xuICAgIHIucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvblwiKS5mb3JFYWNoKCh4KSA9PiB7XG4gICAgICB4LnJlbW92ZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiByO1xuICB9XG59XG4iXX0=