import { savedObj } from "../components/helper.js";
import { RelicBase } from "../model/constants.js";
import { CoreRelic } from "./relic.js";
import { tier } from "./tier.js";
export class Core {
    rels;
    virtues;
    #baseRelics = {
        MIGHT: [10, 12, 11, 6, 7, 1],
        FORTITUDE: [8, 9, 10, 11, 12, 2],
        CELERITY: [12, 6, 11, 13, 14, 3],
        SORCERY: [14, 9, 13, 15, 16, 4],
        SUSTENANCE: [14, 15, 9, 17, 18, 5],
    };
    #slots = {
        MIGHT: [],
        FORTITUDE: [],
        CELERITY: [],
        SORCERY: [],
        SUSTENANCE: [],
    };
    constructor(rels, virtues) {
        this.rels = rels;
        this.virtues = virtues;
        virtues.forEach((v) => {
            this.#baseRelics[v.dura].forEach((b, i) => {
                const stored = savedObj(`${v.dura}.${i}`, this.CoreRelicById(b, i, v.dura));
                if (stored instanceof CoreRelic) {
                    stored.goal = this.rels.find((x) => x.id === stored.goal.id);
                }
                this.#slots[v.dura].push(stored);
            });
        });
    }
    getById(id) {
        return this.rels.find((r) => r.id === id);
    }
    next(v, i, goal) {
        let slot = this.#slots[v][i];
        if (goal) {
            if (slot.GoalTier() < tier.MYTHIC) {
                this.#slots[v][i].goal = this.getById(slot.goal.id + RelicBase);
            }
            else {
                this.#slots[v][i].goal = this.getById(slot.id);
            }
        }
        else {
            if (slot.Tier() < tier.MYTHIC) {
                this.#slots[v][i] = this.CoreRelicById(slot.id + RelicBase, i, v);
            }
            else {
                this.#slots[v][i] = this.CoreRelicById(this.#baseRelics[v][i], i, v);
            }
        }
        return this.#slots[v][i];
    }
    CoreRelicById(id, i, v) {
        const rel = this.getById(id);
        return new CoreRelic(rel.icon, rel.name, rel.id, rel.cost, rel.recipe, i, v, rel);
    }
    all(virtue) {
        if (virtue) {
            return this.#slots[virtue];
        }
        else {
            return this.virtues.flatMap((v) => this.#slots[v.dura]);
        }
    }
    wanted() {
        return this.all()
            .filter((b) => b.id < b.goal.id)
            .map((j) => j.goal);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90eXBlcy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVyxRQUFRLEVBQWUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBYyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR2pDLE1BQU0sT0FBTyxJQUFJO0lBaUJJO0lBQXNCO0lBaEJ6QyxXQUFXLEdBQUc7UUFDWixLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQixVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNuQyxDQUFDO0lBRUYsTUFBTSxHQUFxQztRQUN6QyxLQUFLLEVBQUUsRUFBRTtRQUNULFNBQVMsRUFBRSxFQUFFO1FBQ2IsUUFBUSxFQUFFLEVBQUU7UUFDWixPQUFPLEVBQUUsRUFBRTtRQUNYLFVBQVUsRUFBRSxFQUFFO0tBQ2YsQ0FBQztJQUVGLFlBQW1CLElBQWEsRUFBUyxPQUFpQjtRQUF2QyxTQUFJLEdBQUosSUFBSSxDQUFTO1FBQVMsWUFBTyxHQUFQLE9BQU8sQ0FBVTtRQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN4QyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQ3JCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsRUFDaEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDakMsQ0FBQztnQkFDRixJQUFJLE1BQU0sWUFBWSxTQUFTLEVBQUUsQ0FBQztvQkFDaEMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRCxDQUFDO2dCQUNELElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUFVO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQUksQ0FBQyxDQUFjLEVBQUUsQ0FBUyxFQUFFLElBQWM7UUFDNUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU3QixJQUFJLElBQUksRUFBRSxDQUFDO1lBQ1QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1lBQ2xFLENBQUM7aUJBQU0sQ0FBQztnQkFDTixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNqRCxDQUFDO1FBQ0gsQ0FBQzthQUFNLENBQUM7WUFDTixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEUsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2RSxDQUFDO1FBQ0gsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsYUFBYSxDQUFDLEVBQVUsRUFBRSxDQUFTLEVBQUUsQ0FBYztRQUNqRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sSUFBSSxTQUFTLENBQ2xCLEdBQUcsQ0FBQyxJQUFJLEVBQ1IsR0FBRyxDQUFDLElBQUksRUFDUixHQUFHLENBQUMsRUFBRSxFQUNOLEdBQUcsQ0FBQyxJQUFJLEVBQ1IsR0FBRyxDQUFDLE1BQU0sRUFDVixDQUFDLEVBQ0QsQ0FBQyxFQUNELEdBQUcsQ0FDSixDQUFDO0lBQ0osQ0FBQztJQUlELEdBQUcsQ0FBQyxNQUFvQjtRQUN0QixJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUU7YUFDZCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2FmZVN1bSwgc2F2ZWRPYmosIHN0b3JlZFZhbHVlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaGVscGVyLmpzXCI7XG5pbXBvcnQgeyBSZWxpY0Jhc2UgfSBmcm9tIFwiLi4vbW9kZWwvY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgUmVsaWMsIHsgQ29yZVJlbGljIH0gZnJvbSBcIi4vcmVsaWMuanNcIjtcbmltcG9ydCB7IHRpZXIgfSBmcm9tIFwiLi90aWVyLmpzXCI7XG5pbXBvcnQgeyBEdXJhc1ZpcnR1ZSwgVmlydHVlLCBWaXJ0dWVzIH0gZnJvbSBcIi4vdmlydHVlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3JlIHtcbiAgI2Jhc2VSZWxpY3MgPSB7XG4gICAgTUlHSFQ6IFsxMCwgMTIsIDExLCA2LCA3LCAxXSxcbiAgICBGT1JUSVRVREU6IFs4LCA5LCAxMCwgMTEsIDEyLCAyXSxcbiAgICBDRUxFUklUWTogWzEyLCA2LCAxMSwgMTMsIDE0LCAzXSxcbiAgICBTT1JDRVJZOiBbMTQsIDksIDEzLCAxNSwgMTYsIDRdLFxuICAgIFNVU1RFTkFOQ0U6IFsxNCwgMTUsIDksIDE3LCAxOCwgNV0sXG4gIH07XG5cbiAgI3Nsb3RzOiBSZWNvcmQ8RHVyYXNWaXJ0dWUsIENvcmVSZWxpY1tdPiA9IHtcbiAgICBNSUdIVDogW10sXG4gICAgRk9SVElUVURFOiBbXSxcbiAgICBDRUxFUklUWTogW10sXG4gICAgU09SQ0VSWTogW10sXG4gICAgU1VTVEVOQU5DRTogW10sXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlbHM6IFJlbGljW10sIHB1YmxpYyB2aXJ0dWVzOiBWaXJ0dWVbXSkge1xuICAgIHZpcnR1ZXMuZm9yRWFjaCgodikgPT4ge1xuICAgICAgdGhpcy4jYmFzZVJlbGljc1t2LmR1cmFdLmZvckVhY2goKGIsIGkpID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmVkID0gc2F2ZWRPYmooXG4gICAgICAgICAgYCR7di5kdXJhfS4ke2l9YCxcbiAgICAgICAgICB0aGlzLkNvcmVSZWxpY0J5SWQoYiwgaSwgdi5kdXJhKVxuICAgICAgICApO1xuICAgICAgICBpZiAoc3RvcmVkIGluc3RhbmNlb2YgQ29yZVJlbGljKSB7XG4gICAgICAgICAgc3RvcmVkLmdvYWwgPSB0aGlzLnJlbHMuZmluZCgoeCkgPT4geC5pZCA9PT0gc3RvcmVkLmdvYWwuaWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3Nsb3RzW3YuZHVyYV0ucHVzaChzdG9yZWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRCeUlkKGlkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZWxzLmZpbmQoKHIpID0+IHIuaWQgPT09IGlkKTtcbiAgfVxuXG4gIG5leHQodjogRHVyYXNWaXJ0dWUsIGk6IG51bWJlciwgZ29hbD86IGJvb2xlYW4pIHtcbiAgICBsZXQgc2xvdCA9IHRoaXMuI3Nsb3RzW3ZdW2ldO1xuXG4gICAgaWYgKGdvYWwpIHtcbiAgICAgIGlmIChzbG90LkdvYWxUaWVyKCkgPCB0aWVyLk1ZVEhJQykge1xuICAgICAgICB0aGlzLiNzbG90c1t2XVtpXS5nb2FsID0gdGhpcy5nZXRCeUlkKHNsb3QuZ29hbC5pZCArIFJlbGljQmFzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiNzbG90c1t2XVtpXS5nb2FsID0gdGhpcy5nZXRCeUlkKHNsb3QuaWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc2xvdC5UaWVyKCkgPCB0aWVyLk1ZVEhJQykge1xuICAgICAgICB0aGlzLiNzbG90c1t2XVtpXSA9IHRoaXMuQ29yZVJlbGljQnlJZChzbG90LmlkICsgUmVsaWNCYXNlLCBpLCB2KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuI3Nsb3RzW3ZdW2ldID0gdGhpcy5Db3JlUmVsaWNCeUlkKHRoaXMuI2Jhc2VSZWxpY3Nbdl1baV0sIGksIHYpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4jc2xvdHNbdl1baV07XG4gIH1cblxuICBDb3JlUmVsaWNCeUlkKGlkOiBudW1iZXIsIGk6IG51bWJlciwgdjogRHVyYXNWaXJ0dWUpIHtcbiAgICBjb25zdCByZWwgPSB0aGlzLmdldEJ5SWQoaWQpO1xuICAgIHJldHVybiBuZXcgQ29yZVJlbGljKFxuICAgICAgcmVsLmljb24sXG4gICAgICByZWwubmFtZSxcbiAgICAgIHJlbC5pZCxcbiAgICAgIHJlbC5jb3N0LFxuICAgICAgcmVsLnJlY2lwZSxcbiAgICAgIGksXG4gICAgICB2LFxuICAgICAgcmVsXG4gICAgKTtcbiAgfVxuXG4gIGFsbCgpOiBDb3JlUmVsaWNbXTtcbiAgYWxsKHZpcnR1ZTogRHVyYXNWaXJ0dWUpOiBDb3JlUmVsaWNbXTtcbiAgYWxsKHZpcnR1ZT86IER1cmFzVmlydHVlKTogQ29yZVJlbGljW10ge1xuICAgIGlmICh2aXJ0dWUpIHtcbiAgICAgIHJldHVybiB0aGlzLiNzbG90c1t2aXJ0dWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy52aXJ0dWVzLmZsYXRNYXAoKHYpID0+IHRoaXMuI3Nsb3RzW3YuZHVyYV0pO1xuICAgIH1cbiAgfVxuXG4gIHdhbnRlZCgpOiBSZWxpY1tdIHtcbiAgICByZXR1cm4gdGhpcy5hbGwoKVxuICAgICAgLmZpbHRlcigoYikgPT4gYi5pZCA8IGIuZ29hbC5pZClcbiAgICAgIC5tYXAoKGopID0+IGouZ29hbCk7XG4gIH1cbn1cbiJdfQ==