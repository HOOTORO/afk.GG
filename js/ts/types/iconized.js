import { updateTableData } from "../abex/relicEstimate.js";
import { buttonWrapInput, newEl, storedValue } from "../components/helper.js";
import { elTag, Input } from "../model/constants.js";
export class Iconized {
    id;
    icon;
    name;
    width;
    height;
    constructor(id, icon, name, width, height) {
        this.id = id;
        this.icon = icon;
        this.name = name;
        this.width = width;
        this.height = height;
    }
    html() {
        return newEl(elTag.Img, {
            src: this.icon,
            alt: this.name,
            width: `${this.width}`,
            height: `${this.height}`,
        });
    }
    img() {
        return this.html().getElementsByTagName(elTag.Img)[0];
    }
}
export class IconizedInput extends Iconized {
    buttons;
    value;
    cssName;
    namedId;
    type = Input.Number;
    init = () => {
        return storedValue(this.name) ? storedValue(this.name).toString() : "0";
    };
    update = (y) => {
        if (y >= 0) {
            this.value = y;
            storedValue(this.name, this.value);
            updateTableData();
        }
    };
    constructor(id, src, name, type, buttons, value, cssName, namedId) {
        super(id, src);
        this.buttons = buttons;
        this.value = value;
        this.cssName = cssName;
        this.namedId = namedId;
        this.name = name;
        if (type) {
            this.type = type;
        }
    }
    html() {
        const img = super.html(), container = newEl(elTag.Label, {
            for: this.namedId,
        }), props = {
            type: this.type,
            id: this.namedId,
            class: this.cssName,
            name: this.name,
            value: this.init(),
        };
        let input = newEl(elTag.Input, props);
        input.addEventListener("input", (e) => {
            if (e.target instanceof HTMLInputElement && e.target.valueAsNumber > 0) {
                this.update(e.target.valueAsNumber);
            }
        });
        if (this.buttons) {
            input = buttonWrapInput(input, this.update);
        }
        container.appendChild(img);
        container.appendChild(input);
        return container;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbml6ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvdHlwZXMvaWNvbml6ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFckQsTUFBTSxPQUFPLFFBQVE7SUFXVjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBTFQsWUFDUyxFQUFVLEVBQ1YsSUFBWSxFQUNaLElBQWEsRUFDYixLQUFjLEVBQ2QsTUFBZTtRQUpmLE9BQUUsR0FBRixFQUFFLENBQVE7UUFDVixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osU0FBSSxHQUFKLElBQUksQ0FBUztRQUNiLFVBQUssR0FBTCxLQUFLLENBQVM7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFTO0lBQ3JCLENBQUM7SUFFSixJQUFJO1FBQ0YsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUN0QixHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZCxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3RCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxRQUFRO0lBbUJoQztJQUNBO0lBQ0E7SUFDQTtJQXJCRCxJQUFJLEdBQVUsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM1QixJQUFJLEdBQWlCLEdBQUcsRUFBRTtRQUMvQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUMxRSxDQUFDLENBQUM7SUFDSyxNQUFNLEdBQXFCLENBQUMsQ0FBUyxFQUFFLEVBQUU7UUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUNmLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxlQUFlLEVBQUUsQ0FBQztRQUNwQixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBR0YsWUFDRSxFQUFVLEVBQ1YsR0FBVyxFQUNYLElBQVksRUFDWixJQUFZLEVBQ0wsT0FBaUIsRUFDakIsS0FBYyxFQUNkLE9BQWdCLEVBQ2hCLE9BQWdCO1FBRXZCLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFMUixZQUFPLEdBQVAsT0FBTyxDQUFVO1FBQ2pCLFVBQUssR0FBTCxLQUFLLENBQVM7UUFDZCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFHdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNULElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ25CLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFDdEIsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQzdCLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTztTQUNsQixDQUFDLEVBQ0YsS0FBSyxHQUFHO1lBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTztZQUNuQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRTtTQUNuQixDQUFDO1FBQ0osSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxDQUFDLE1BQU0sWUFBWSxnQkFBZ0IsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDdkUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pCLEtBQUssR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBQ0QsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVwZGF0ZVRhYmxlRGF0YSB9IGZyb20gXCIuLi9hYmV4L3JlbGljRXN0aW1hdGUuanNcIjtcbmltcG9ydCB7IGJ1dHRvbldyYXBJbnB1dCwgbmV3RWwsIHN0b3JlZFZhbHVlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaGVscGVyLmpzXCI7XG5pbXBvcnQgeyBlbFRhZywgSW5wdXQgfSBmcm9tIFwiLi4vbW9kZWwvY29uc3RhbnRzLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBJY29uaXplZCB7XG4gIGNvbnN0cnVjdG9yKGlkOiBudW1iZXIsIGljb246IHN0cmluZyk7XG4gIGNvbnN0cnVjdG9yKGlkOiBudW1iZXIsIGljb246IHN0cmluZywgbmFtZTogc3RyaW5nKTtcbiAgY29uc3RydWN0b3IoXG4gICAgaWQ6IG51bWJlcixcbiAgICBpY29uOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXJcbiAgKTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGlkOiBudW1iZXIsXG4gICAgcHVibGljIGljb246IHN0cmluZyxcbiAgICBwdWJsaWMgbmFtZT86IHN0cmluZyxcbiAgICBwdWJsaWMgd2lkdGg/OiBudW1iZXIsXG4gICAgcHVibGljIGhlaWdodD86IG51bWJlclxuICApIHt9XG5cbiAgaHRtbCgpIHtcbiAgICByZXR1cm4gbmV3RWwoZWxUYWcuSW1nLCB7XG4gICAgICBzcmM6IHRoaXMuaWNvbixcbiAgICAgIGFsdDogdGhpcy5uYW1lLFxuICAgICAgd2lkdGg6IGAke3RoaXMud2lkdGh9YCxcbiAgICAgIGhlaWdodDogYCR7dGhpcy5oZWlnaHR9YCxcbiAgICB9KTtcbiAgfVxuXG4gIGltZygpIHtcbiAgICByZXR1cm4gdGhpcy5odG1sKCkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZWxUYWcuSW1nKVswXTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSWNvbml6ZWRJbnB1dCBleHRlbmRzIEljb25pemVkIHtcbiAgcHJpdmF0ZSB0eXBlOiBJbnB1dCA9IElucHV0Lk51bWJlcjtcbiAgcHVibGljIGluaXQ6ICgpID0+IHN0cmluZyA9ICgpID0+IHtcbiAgICByZXR1cm4gc3RvcmVkVmFsdWUodGhpcy5uYW1lKSA/IHN0b3JlZFZhbHVlKHRoaXMubmFtZSkudG9TdHJpbmcoKSA6IFwiMFwiO1xuICB9O1xuICBwdWJsaWMgdXBkYXRlOiAoeDogYW55KSA9PiB2b2lkID0gKHk6IG51bWJlcikgPT4ge1xuICAgIGlmICh5ID49IDApIHtcbiAgICAgIHRoaXMudmFsdWUgPSB5O1xuICAgICAgc3RvcmVkVmFsdWUodGhpcy5uYW1lLCB0aGlzLnZhbHVlKTtcbiAgICAgIHVwZGF0ZVRhYmxlRGF0YSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgc3JjOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk7XG4gIGNvbnN0cnVjdG9yKGlkOiBudW1iZXIsIHNyYzogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHR5cGU6IElucHV0KTtcbiAgY29uc3RydWN0b3IoXG4gICAgaWQ6IG51bWJlcixcbiAgICBzcmM6IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdHlwZT86IElucHV0LFxuICAgIHB1YmxpYyBidXR0b25zPzogYm9vbGVhbixcbiAgICBwdWJsaWMgdmFsdWU/OiBudW1iZXIsXG4gICAgcHVibGljIGNzc05hbWU/OiBzdHJpbmcsXG4gICAgcHVibGljIG5hbWVkSWQ/OiBzdHJpbmdcbiAgKSB7XG4gICAgc3VwZXIoaWQsIHNyYyk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICBpZiAodHlwZSkge1xuICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG4gIH1cblxuICBodG1sKCk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBpbWcgPSBzdXBlci5odG1sKCksXG4gICAgICBjb250YWluZXIgPSBuZXdFbChlbFRhZy5MYWJlbCwge1xuICAgICAgICBmb3I6IHRoaXMubmFtZWRJZCxcbiAgICAgIH0pLFxuICAgICAgcHJvcHMgPSB7XG4gICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgaWQ6IHRoaXMubmFtZWRJZCxcbiAgICAgICAgY2xhc3M6IHRoaXMuY3NzTmFtZSxcbiAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICB2YWx1ZTogdGhpcy5pbml0KCksXG4gICAgICB9O1xuICAgIGxldCBpbnB1dCA9IG5ld0VsKGVsVGFnLklucHV0LCBwcm9wcyk7XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChlKSA9PiB7XG4gICAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ICYmIGUudGFyZ2V0LnZhbHVlQXNOdW1iZXIgPiAwKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKGUudGFyZ2V0LnZhbHVlQXNOdW1iZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0aGlzLmJ1dHRvbnMpIHtcbiAgICAgIGlucHV0ID0gYnV0dG9uV3JhcElucHV0KGlucHV0LCB0aGlzLnVwZGF0ZSk7XG4gICAgfVxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbWcpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxufVxuIl19