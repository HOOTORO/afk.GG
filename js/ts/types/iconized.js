import { updateTableData } from "../abex/relicEstimate.js";
import { buttonWrapInput, newEl, storedValue } from "../components/helper.js";
import { elTag, Input } from "../model/constants.js";
export class Iconized {
    id;
    icon;
    name;
    width;
    height;
    constructor(id, icon, name, width, height) {
        this.id = id;
        this.icon = icon;
        this.name = name;
        this.width = width;
        this.height = height;
    }
    html() {
        return newEl(elTag.Img, {
            src: this.icon,
            alt: this.name,
            width: `${this.width}`,
            height: `${this.height}`,
        });
    }
    img() {
        return this.html().getElementsByTagName(elTag.Img)[0];
    }
}
export class IconizedInput extends Iconized {
    buttons;
    value;
    cssName;
    namedId;
    type = Input.Number;
    init = () => {
        return storedValue(this.name) ? storedValue(this.name).toString() : "0";
    };
    update = (y) => {
        if (y >= 0) {
            this.value = y;
            storedValue(this.name, this.value);
            updateTableData();
        }
    };
    constructor(id, src, name, type, buttons, value, cssName, namedId) {
        super(id, src);
        this.buttons = buttons;
        this.value = value;
        this.cssName = cssName;
        this.namedId = namedId;
        this.name = name;
        if (type) {
            this.type = type;
        }
    }
    html() {
        const img = super.html(), container = newEl(elTag.Label, {
            for: this.namedId,
        }), props = {
            type: this.type,
            id: this.namedId,
            class: this.cssName,
            name: this.name,
            value: this.init(),
        };
        let input = newEl(elTag.Input, props);
        if (this.buttons) {
            input = buttonWrapInput(input, this.update);
        }
        container.appendChild(img);
        container.appendChild(input);
        return container;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbml6ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvdHlwZXMvaWNvbml6ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFckQsTUFBTSxPQUFPLFFBQVE7SUFXVjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBTFQsWUFDUyxFQUFVLEVBQ1YsSUFBWSxFQUNaLElBQWEsRUFDYixLQUFjLEVBQ2QsTUFBZTtRQUpmLE9BQUUsR0FBRixFQUFFLENBQVE7UUFDVixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osU0FBSSxHQUFKLElBQUksQ0FBUztRQUNiLFVBQUssR0FBTCxLQUFLLENBQVM7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFTO0lBQ3JCLENBQUM7SUFFSixJQUFJO1FBQ0YsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUN0QixHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZCxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3RCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxRQUFRO0lBbUJoQztJQUNBO0lBQ0E7SUFDQTtJQXJCRCxJQUFJLEdBQVUsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM1QixJQUFJLEdBQWlCLEdBQUcsRUFBRTtRQUMvQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUMxRSxDQUFDLENBQUM7SUFDSyxNQUFNLEdBQXFCLENBQUMsQ0FBUyxFQUFFLEVBQUU7UUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUNmLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxlQUFlLEVBQUUsQ0FBQztRQUNwQixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBR0YsWUFDRSxFQUFVLEVBQ1YsR0FBVyxFQUNYLElBQVksRUFDWixJQUFZLEVBQ0wsT0FBaUIsRUFDakIsS0FBYyxFQUNkLE9BQWdCLEVBQ2hCLE9BQWdCO1FBRXZCLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFMUixZQUFPLEdBQVAsT0FBTyxDQUFVO1FBQ2pCLFVBQUssR0FBTCxLQUFLLENBQVM7UUFDZCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFHdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNULElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ25CLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFDdEIsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQzdCLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTztTQUNsQixDQUFDLEVBQ0YsS0FBSyxHQUFHO1lBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTztZQUNuQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRTtTQUNuQixDQUFDO1FBQ0osSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdEMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakIsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLENBQUM7UUFDRCxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXBkYXRlVGFibGVEYXRhIH0gZnJvbSBcIi4uL2FiZXgvcmVsaWNFc3RpbWF0ZS5qc1wiO1xuaW1wb3J0IHsgYnV0dG9uV3JhcElucHV0LCBuZXdFbCwgc3RvcmVkVmFsdWUgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9oZWxwZXIuanNcIjtcbmltcG9ydCB7IGVsVGFnLCBJbnB1dCB9IGZyb20gXCIuLi9tb2RlbC9jb25zdGFudHMuanNcIjtcblxuZXhwb3J0IGNsYXNzIEljb25pemVkIHtcbiAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgaWNvbjogc3RyaW5nKTtcbiAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgaWNvbjogc3RyaW5nLCBuYW1lOiBzdHJpbmcpO1xuICBjb25zdHJ1Y3RvcihcbiAgICBpZDogbnVtYmVyLFxuICAgIGljb246IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlclxuICApO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaWQ6IG51bWJlcixcbiAgICBwdWJsaWMgaWNvbjogc3RyaW5nLFxuICAgIHB1YmxpYyBuYW1lPzogc3RyaW5nLFxuICAgIHB1YmxpYyB3aWR0aD86IG51bWJlcixcbiAgICBwdWJsaWMgaGVpZ2h0PzogbnVtYmVyXG4gICkge31cblxuICBodG1sKCkge1xuICAgIHJldHVybiBuZXdFbChlbFRhZy5JbWcsIHtcbiAgICAgIHNyYzogdGhpcy5pY29uLFxuICAgICAgYWx0OiB0aGlzLm5hbWUsXG4gICAgICB3aWR0aDogYCR7dGhpcy53aWR0aH1gLFxuICAgICAgaGVpZ2h0OiBgJHt0aGlzLmhlaWdodH1gLFxuICAgIH0pO1xuICB9XG5cbiAgaW1nKCkge1xuICAgIHJldHVybiB0aGlzLmh0bWwoKS5nZXRFbGVtZW50c0J5VGFnTmFtZShlbFRhZy5JbWcpWzBdO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJY29uaXplZElucHV0IGV4dGVuZHMgSWNvbml6ZWQge1xuICBwcml2YXRlIHR5cGU6IElucHV0ID0gSW5wdXQuTnVtYmVyO1xuICBwdWJsaWMgaW5pdDogKCkgPT4gc3RyaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiBzdG9yZWRWYWx1ZSh0aGlzLm5hbWUpID8gc3RvcmVkVmFsdWUodGhpcy5uYW1lKS50b1N0cmluZygpIDogXCIwXCI7XG4gIH07XG4gIHB1YmxpYyB1cGRhdGU6ICh4OiBhbnkpID0+IHZvaWQgPSAoeTogbnVtYmVyKSA9PiB7XG4gICAgaWYgKHkgPj0gMCkge1xuICAgICAgdGhpcy52YWx1ZSA9IHk7XG4gICAgICBzdG9yZWRWYWx1ZSh0aGlzLm5hbWUsIHRoaXMudmFsdWUpO1xuICAgICAgdXBkYXRlVGFibGVEYXRhKCk7XG4gICAgfVxuICB9O1xuICBjb25zdHJ1Y3RvcihpZDogbnVtYmVyLCBzcmM6IHN0cmluZywgbmFtZTogc3RyaW5nKTtcbiAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgc3JjOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgdHlwZTogSW5wdXQpO1xuICBjb25zdHJ1Y3RvcihcbiAgICBpZDogbnVtYmVyLFxuICAgIHNyYzogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICB0eXBlPzogSW5wdXQsXG4gICAgcHVibGljIGJ1dHRvbnM/OiBib29sZWFuLFxuICAgIHB1YmxpYyB2YWx1ZT86IG51bWJlcixcbiAgICBwdWJsaWMgY3NzTmFtZT86IHN0cmluZyxcbiAgICBwdWJsaWMgbmFtZWRJZD86IHN0cmluZ1xuICApIHtcbiAgICBzdXBlcihpZCwgc3JjKTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgfVxuXG4gIGh0bWwoKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGltZyA9IHN1cGVyLmh0bWwoKSxcbiAgICAgIGNvbnRhaW5lciA9IG5ld0VsKGVsVGFnLkxhYmVsLCB7XG4gICAgICAgIGZvcjogdGhpcy5uYW1lZElkLFxuICAgICAgfSksXG4gICAgICBwcm9wcyA9IHtcbiAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICBpZDogdGhpcy5uYW1lZElkLFxuICAgICAgICBjbGFzczogdGhpcy5jc3NOYW1lLFxuICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgIHZhbHVlOiB0aGlzLmluaXQoKSxcbiAgICAgIH07XG4gICAgbGV0IGlucHV0ID0gbmV3RWwoZWxUYWcuSW5wdXQsIHByb3BzKTtcblxuICAgIGlmICh0aGlzLmJ1dHRvbnMpIHtcbiAgICAgIGlucHV0ID0gYnV0dG9uV3JhcElucHV0KGlucHV0LCB0aGlzLnVwZGF0ZSk7XG4gICAgfVxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbWcpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxufVxuIl19