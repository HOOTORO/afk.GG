import { elTag, newEl } from "../components/helper.js";
import { AbExSellModifier, RelicBase } from "../model/constants.js";
import { IconizedInput } from "./abex-resource.js";
import { Tier } from "./tier.js";
export class Settlement extends IconizedInput {
    essencePerHour;
    yield;
    dropTier;
    dropTime;
    constructor(id, icon, name, essencePerHour, yld, dropTier, dropTime) {
        const hcls = "abex town";
        super(id, icon, name, 0, hcls);
        this.essencePerHour = essencePerHour;
        this.yield = yld;
        this.dropTier = dropTier;
        this.dropTime = dropTime;
        this.value = parseInt(this.init());
    }
    EPH() {
        return (this.value *
            (this.essencePerHour + (this.essencePerHour * this.yield) / 100));
    }
    RelicDrop() {
        return this.dropTime / this.value / 3600;
    }
    ConvertedDropEssValue(avgPrice, wantedQuantity) {
        const hitProbability = wantedQuantity / RelicBase;
        return ((avgPrice / this.RelicDrop()) * hitProbability +
            (((1 - hitProbability) * avgPrice) / this.RelicDrop()) * AbExSellModifier);
    }
    Tier() {
        return new Tier(this.dropTier);
    }
    htmlInfo() {
        const color = this.Tier().color();
        const el = newEl(elTag.Span, { style: `color: ${color}` }, `${this.name} : [ ${this.RelicDrop().toPrecision(3)}h ]`);
        return el;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90eXBlcy9zZXR0bGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRWpDLE1BQU0sT0FBTyxVQUFXLFNBQVEsYUFBYTtJQUMzQyxjQUFjLENBQVM7SUFDdkIsS0FBSyxDQUFTO0lBQ2QsUUFBUSxDQUFTO0lBQ2pCLFFBQVEsQ0FBUztJQUNqQixZQUNFLEVBQVUsRUFDVixJQUFZLEVBQ1osSUFBWSxFQUNaLGNBQXNCLEVBQ3RCLEdBQVcsRUFDWCxRQUFnQixFQUNoQixRQUFnQjtRQUVoQixNQUFNLElBQUksR0FBRyxXQUFXLENBQUM7UUFFekIsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sR0FBRztRQUNSLE9BQU8sQ0FDTCxJQUFJLENBQUMsS0FBSztZQUNWLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUNqRSxDQUFDO0lBQ0osQ0FBQztJQUNNLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDM0MsQ0FBQztJQUVNLHFCQUFxQixDQUFDLFFBQWdCLEVBQUUsY0FBc0I7UUFDbkUsTUFBTSxjQUFjLEdBQUcsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUNsRCxPQUFPLENBQ0wsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsY0FBYztZQUM5QyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLENBQzFFLENBQUM7SUFDSixDQUFDO0lBRU0sSUFBSTtRQUNULE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FDZCxLQUFLLENBQUMsSUFBSSxFQUNWLEVBQUUsS0FBSyxFQUFFLFVBQVUsS0FBSyxFQUFFLEVBQUUsRUFDNUIsR0FBRyxJQUFJLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FDekQsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZWxUYWcsIG5ld0VsIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaGVscGVyLmpzXCI7XG5pbXBvcnQgeyBBYkV4U2VsbE1vZGlmaWVyLCBSZWxpY0Jhc2UgfSBmcm9tIFwiLi4vbW9kZWwvY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBJY29uaXplZElucHV0IH0gZnJvbSBcIi4vYWJleC1yZXNvdXJjZS5qc1wiO1xuaW1wb3J0IHsgVGllciB9IGZyb20gXCIuL3RpZXIuanNcIjtcblxuZXhwb3J0IGNsYXNzIFNldHRsZW1lbnQgZXh0ZW5kcyBJY29uaXplZElucHV0IHtcbiAgZXNzZW5jZVBlckhvdXI6IG51bWJlcjtcbiAgeWllbGQ6IG51bWJlcjtcbiAgZHJvcFRpZXI6IG51bWJlcjtcbiAgZHJvcFRpbWU6IG51bWJlcjtcbiAgY29uc3RydWN0b3IoXG4gICAgaWQ6IG51bWJlcixcbiAgICBpY29uOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGVzc2VuY2VQZXJIb3VyOiBudW1iZXIsXG4gICAgeWxkOiBudW1iZXIsXG4gICAgZHJvcFRpZXI6IG51bWJlcixcbiAgICBkcm9wVGltZTogbnVtYmVyXG4gICkge1xuICAgIGNvbnN0IGhjbHMgPSBcImFiZXggdG93blwiO1xuXG4gICAgc3VwZXIoaWQsIGljb24sIG5hbWUsIDAsIGhjbHMpO1xuICAgIHRoaXMuZXNzZW5jZVBlckhvdXIgPSBlc3NlbmNlUGVySG91cjtcbiAgICB0aGlzLnlpZWxkID0geWxkO1xuICAgIHRoaXMuZHJvcFRpZXIgPSBkcm9wVGllcjtcbiAgICB0aGlzLmRyb3BUaW1lID0gZHJvcFRpbWU7XG4gICAgdGhpcy52YWx1ZSA9IHBhcnNlSW50KHRoaXMuaW5pdCgpKTtcbiAgfVxuXG4gIHB1YmxpYyBFUEgoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMudmFsdWUgKlxuICAgICAgKHRoaXMuZXNzZW5jZVBlckhvdXIgKyAodGhpcy5lc3NlbmNlUGVySG91ciAqIHRoaXMueWllbGQpIC8gMTAwKVxuICAgICk7XG4gIH1cbiAgcHVibGljIFJlbGljRHJvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5kcm9wVGltZSAvIHRoaXMudmFsdWUgLyAzNjAwO1xuICB9XG5cbiAgcHVibGljIENvbnZlcnRlZERyb3BFc3NWYWx1ZShhdmdQcmljZTogbnVtYmVyLCB3YW50ZWRRdWFudGl0eTogbnVtYmVyKSB7XG4gICAgY29uc3QgaGl0UHJvYmFiaWxpdHkgPSB3YW50ZWRRdWFudGl0eSAvIFJlbGljQmFzZTtcbiAgICByZXR1cm4gKFxuICAgICAgKGF2Z1ByaWNlIC8gdGhpcy5SZWxpY0Ryb3AoKSkgKiBoaXRQcm9iYWJpbGl0eSArXG4gICAgICAoKCgxIC0gaGl0UHJvYmFiaWxpdHkpICogYXZnUHJpY2UpIC8gdGhpcy5SZWxpY0Ryb3AoKSkgKiBBYkV4U2VsbE1vZGlmaWVyXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBUaWVyKCk6IFRpZXIge1xuICAgIHJldHVybiBuZXcgVGllcih0aGlzLmRyb3BUaWVyKTtcbiAgfVxuXG4gIGh0bWxJbmZvKCk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBjb2xvciA9IHRoaXMuVGllcigpLmNvbG9yKCk7XG4gICAgY29uc3QgZWwgPSBuZXdFbChcbiAgICAgIGVsVGFnLlNwYW4sXG4gICAgICB7IHN0eWxlOiBgY29sb3I6ICR7Y29sb3J9YCB9LFxuICAgICAgYCR7dGhpcy5uYW1lfSA6IFsgJHt0aGlzLlJlbGljRHJvcCgpLnRvUHJlY2lzaW9uKDMpfWggXWBcbiAgICApO1xuICAgIHJldHVybiBlbDtcbiAgfVxufVxuIl19